{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./app.menu.service\";\nimport * as i2 from \"primeng/api\";\nimport * as i3 from \"./app.component\";\nfunction AppMainComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 6);\n  }\n}\nconst _c0 = function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n  return {\n    \"p-input-filled\": a0,\n    \"p-ripple-disabled\": a1,\n    \"layout-static\": a2,\n    \"layout-overlay\": a3,\n    \"layout-overlay-active\": a4,\n    \"layout-horizontal\": a5,\n    \"layout-static-active\": a6,\n    \"layout-mobile-active\": a7,\n    \"layout-rtl\": a8,\n    \"layout-rightpanel-active\": a9\n  };\n};\nexport let AppMainComponent = /*#__PURE__*/(() => {\n  class AppMainComponent {\n    constructor(renderer, menuService, primengConfig, app) {\n      this.renderer = renderer;\n      this.menuService = menuService;\n      this.primengConfig = primengConfig;\n      this.app = app;\n      this.menuHoverActive = false;\n      this.searchClick = false;\n      this.search = false;\n    }\n    ngAfterViewInit() {\n      // hides the horizontal submenus or top menu if outside is clicked\n      this.documentClickListener = this.renderer.listen('body', 'click', event => {\n        if (!this.topbarItemClick) {\n          this.activeTopbarItem = null;\n          this.topbarMenuActive = false;\n        }\n        if (!this.menuClick && this.isHorizontal()) {\n          this.menuService.reset();\n        }\n        if (this.configActive && !this.configClick) {\n          this.configActive = false;\n        }\n        if (!this.rightPanelClick) {\n          this.rightPanelActive = false;\n        }\n        if (!this.menuClick) {\n          if (this.overlayMenuActive) {\n            this.overlayMenuActive = false;\n          }\n          if (this.staticMenuMobileActive) {\n            this.staticMenuMobileActive = false;\n          }\n          this.menuHoverActive = false;\n          this.unblockBodyScroll();\n        }\n        if (!this.searchClick) {\n          this.search = false;\n        }\n        this.searchClick = false;\n        this.configClick = false;\n        this.topbarItemClick = false;\n        this.menuClick = false;\n        this.rightPanelClick = false;\n      });\n    }\n    onMenuButtonClick(event) {\n      this.rotateMenuButton = !this.rotateMenuButton;\n      this.topbarMenuActive = false;\n      this.menuClick = true;\n      if (this.app.menuMode === 'overlay' && !this.isMobile()) {\n        this.overlayMenuActive = !this.overlayMenuActive;\n      }\n      if (this.isDesktop()) {\n        this.staticMenuDesktopInactive = !this.staticMenuDesktopInactive;\n      } else {\n        this.staticMenuMobileActive = !this.staticMenuMobileActive;\n        if (this.staticMenuMobileActive) {\n          this.blockBodyScroll();\n        } else {\n          this.unblockBodyScroll();\n        }\n      }\n      event.preventDefault();\n    }\n    onMenuClick($event) {\n      this.menuClick = true;\n    }\n    onTopbarItemClick(event, item) {\n      this.topbarItemClick = true;\n      if (this.activeTopbarItem === item) {\n        this.activeTopbarItem = null;\n      } else {\n        this.activeTopbarItem = item;\n      }\n      if (item.className === 'search-item topbar-item') {\n        this.search = !this.search;\n        this.searchClick = !this.searchClick;\n      }\n      event.preventDefault();\n    }\n    onTopbarSubItemClick(event) {\n      event.preventDefault();\n    }\n    onRTLChange(event) {\n      this.app.isRTL = event.checked;\n    }\n    onRippleChange(event) {\n      this.app.ripple = event.checked;\n      this.primengConfig.ripple = event.checked;\n    }\n    onConfigClick(event) {\n      this.configClick = true;\n    }\n    onRightPanelButtonClick(event) {\n      this.rightPanelClick = true;\n      this.rightPanelActive = !this.rightPanelActive;\n      event.preventDefault();\n    }\n    onRightPanelClick() {\n      this.rightPanelClick = true;\n    }\n    isTablet() {\n      const width = window.innerWidth;\n      return width <= 1024 && width > 640;\n    }\n    isDesktop() {\n      return window.innerWidth > 992;\n    }\n    isMobile() {\n      return window.innerWidth <= 640;\n    }\n    isOverlay() {\n      return this.app.menuMode === 'overlay';\n    }\n    isStatic() {\n      return this.app.menuMode === 'static';\n    }\n    isHorizontal() {\n      return this.app.menuMode === 'horizontal';\n    }\n    blockBodyScroll() {\n      if (document.body.classList) {\n        document.body.classList.add('blocked-scroll');\n      } else {\n        document.body.className += ' blocked-scroll';\n      }\n    }\n    unblockBodyScroll() {\n      if (document.body.classList) {\n        document.body.classList.remove('blocked-scroll');\n      } else {\n        document.body.className = document.body.className.replace(new RegExp('(^|\\\\b)' + 'blocked-scroll'.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n      }\n    }\n    ngOnDestroy() {\n      if (this.documentClickListener) {\n        this.documentClickListener();\n      }\n    }\n  }\n  AppMainComponent.ɵfac = function AppMainComponent_Factory(t) {\n    return new (t || AppMainComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.MenuService), i0.ɵɵdirectiveInject(i2.PrimeNGConfig), i0.ɵɵdirectiveInject(i3.AppComponent));\n  };\n  AppMainComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppMainComponent,\n    selectors: [[\"app-main\"]],\n    decls: 13,\n    vars: 15,\n    consts: [[1, \"layout-wrapper\", 3, \"ngClass\"], [1, \"menu-wrapper\", 3, \"click\"], [1, \"layout-menu-container\"], [1, \"layout-main\"], [1, \"layout-content\"], [\"class\", \"layout-mask modal-in\", 4, \"ngIf\"], [1, \"layout-mask\", \"modal-in\"]],\n    template: function AppMainComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"app-topbar\")(2, \"app-rightpanel\");\n        i0.ɵɵelementStart(3, \"div\", 1);\n        i0.ɵɵlistener(\"click\", function AppMainComponent_Template_div_click_3_listener($event) {\n          return ctx.onMenuClick($event);\n        });\n        i0.ɵɵelementStart(4, \"div\", 2);\n        i0.ɵɵelement(5, \"app-menu\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"div\", 3);\n        i0.ɵɵelement(7, \"app-breadcrumb\");\n        i0.ɵɵelementStart(8, \"div\", 4);\n        i0.ɵɵelement(9, \"router-outlet\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"app-footer\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"app-config\");\n        i0.ɵɵtemplate(12, AppMainComponent_div_12_Template, 1, 0, \"div\", 5);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(\"layout-menu-\" + ctx.app.menuTheme + \" layout-topbar-\" + ctx.app.topbarTheme);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunctionV(4, _c0, [ctx.app.inputStyle === \"filled\", !ctx.app.ripple, ctx.isStatic(), ctx.isOverlay(), ctx.overlayMenuActive && ctx.isOverlay(), ctx.isHorizontal(), !ctx.staticMenuDesktopInactive && ctx.isStatic(), ctx.staticMenuMobileActive, ctx.app.isRTL, ctx.rightPanelActive]));\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"ngIf\", ctx.staticMenuMobileActive);\n      }\n    },\n    encapsulation: 2\n  });\n  return AppMainComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}