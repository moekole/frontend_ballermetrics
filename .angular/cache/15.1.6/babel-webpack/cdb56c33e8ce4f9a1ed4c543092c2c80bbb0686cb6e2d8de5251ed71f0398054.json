{"ast":null,"code":"import * as i0 from \"@angular/core\";\nconst jwt_decode = require('jwt-decode');\nexport class BallerserviceService {\n  constructor() {\n    this.accessToken = null;\n    this.refreshTokenv = null;\n  }\n  login(email, password) {\n    // Make login request, obtain tokens, and save them\n    const url = 'https://ballermetrics-backend2.onrender.com/registration/authenticate';\n    console.log(url);\n    var user = {\n      email: email,\n      password: password\n    };\n    console.log(user);\n    var init = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    };\n    console.log(init);\n    fetch(url, init).then(res => {\n      if (!res.ok) {\n        console.log(\"fetch fehler\");\n      }\n      return res.json();\n    }).then(json => {\n      console.log(json);\n      this.accessToken = json['accesstoken'];\n      this.refreshTokenv = json['refreshtoken'];\n      console.log(this.accessToken);\n      console.log(this.refreshTokenv);\n      localStorage.setItem('accesstoken', json['accesstoken']);\n      console.log(localStorage.getItem('accesstoken'));\n      localStorage.setItem('refreshtoken', json['refreshtoken']);\n      console.log(\"hier ist der Refreshtoken: \" + localStorage.getItem('refreshtoken'));\n      const currentTimeMillis = Math.floor(new Date().getTime() / 1000);\n      const oneDayInSeconds = 24 * 60 * 60; // 24 hours * 60 minutes * 60 seconds\n      const futureTimeMillis = currentTimeMillis + oneDayInSeconds;\n      localStorage.setItem('refreshtokenexp', \"\" + futureTimeMillis);\n      const accessLogin = localStorage.getItem('accesstoken');\n      console.log(jwt_decode(accessLogin));\n    }).catch(err => {\n      console.log(err);\n    });\n    return null;\n  }\n  authenticate(number) {\n    const token = localStorage.getItem('accesstoken');\n    console.log(token);\n    const url = `registration/login/` + token + \"/\" + number;\n    var myHeaders = new Headers();\n    myHeaders.append(\"Authorization\", \"Bearer \" + token);\n    var requestOptions = {\n      method: 'GET',\n      headers: myHeaders,\n      redirect: 'follow'\n    };\n    console.log(url, requestOptions);\n    fetch(url).then(res => {\n      if (!res.ok) {\n        console.log(\"fetch fehler\");\n      }\n      return res.json();\n    }).then(json => {\n      console.log(json);\n      localStorage.setItem('accesstokenauth', json['token']);\n    }).catch(err => console.log(err));\n  }\n  refreshToken() {\n    // Make refresh token request, obtain a new access token, and update the saved token\n    const url = `registration/refresh`;\n    const refreshToken = localStorage.getItem('refreshtoken');\n    console.log(refreshToken);\n    var tkn = {\n      refreshToken: refreshToken\n    };\n    console.log(tkn);\n    var init = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(tkn)\n    };\n    console.log(init);\n    fetch(url, init).then(res => {\n      if (!res.ok) {\n        console.log(\"fetch fehler\");\n      }\n      return res.json();\n    }).then(json => {\n      console.log(json);\n      localStorage.setItem('accesstoken', json['accesstoken']);\n      localStorage.setItem('refreshtoken', json['refreshtoken']);\n    }).catch(err => console.log(err));\n  }\n  isAuthenticatedAccessToken() {\n    const accessLogin = localStorage.getItem('accesstoken');\n    const accessauth = localStorage.getItem('accesstokenauth');\n    const decodedToken = jwt_decode(accessLogin);\n    const exp = decodedToken.exp;\n    const currentTimeMillis = Math.floor(new Date().getTime() / 1000);\n    const check = exp - currentTimeMillis;\n    if (check < 0) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  isAuthenticatedRefreshtokenToken() {\n    /*const refreshtoken = localStorage.getItem('refreshtoken');\n         const currentTimeMillis = new Date().getTime();\n    let millis: number = 0;\n    \n         console.log(refreshtoken);\n         const url = `${environment.apiUrl}registration/getExpireDate`;\n         console.log(url);\n    var token = {\n        refreshToken: refreshtoken\n      }\n             \n             var init: RequestInit = {\n        method : 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(token)\n      };\n             console.log(init);\n           fetch(url, init)\n      .then(res => {\n      if(!res.ok)\n      {\n          console.log(\"fetch fehler\");\n      }\n      return res.json();\n      }).then(json => {\n      console.log(json);\n      millis = json;\n           \n      }).catch(err => console.log(err));\n     \n      const check = millis - currentTimeMillis;*/\n    /*const refreshToken = localStorage.getItem('refreshtokenexp');\n         console.log(refreshToken);\n         const n = parseInt(refreshToken);\n         const currentTimeMillis: number = Math.floor(new Date().getTime() / 1000);\n         const check = n - currentTimeMillis;\n      console.log(check);*/\n    const refreshToken = localStorage.getItem('refreshtokenexp');\n    console.log(refreshToken);\n    const n = parseInt(refreshToken);\n    const currentTimeMillis = Math.floor(new Date().getTime() / 1000);\n    const check = n - currentTimeMillis;\n    console.log(check);\n    if (check < 0) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  isTokenEmpty() {\n    const accessLogin = localStorage.getItem('accesstoken');\n    const refreshToken = localStorage.getItem('refreshtoken');\n    console.log(accessLogin);\n    if (accessLogin == null && refreshToken == null) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\nBallerserviceService.ɵfac = function BallerserviceService_Factory(t) {\n  return new (t || BallerserviceService)();\n};\nBallerserviceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BallerserviceService,\n  factory: BallerserviceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["jwt_decode","require","BallerserviceService","constructor","login","email","password","url","console","log","user","init","method","headers","body","JSON","stringify","fetch","then","res","ok","json","accessToken","refreshTokenv","localStorage","setItem","getItem","currentTimeMillis","Math","floor","Date","getTime","oneDayInSeconds","futureTimeMillis","accessLogin","catch","err","authenticate","number","token","myHeaders","Headers","append","requestOptions","redirect","refreshToken","tkn","isAuthenticatedAccessToken","accessauth","decodedToken","exp","check","isAuthenticatedRefreshtokenToken","n","parseInt","isTokenEmpty","factory","providedIn"],"sourceRoot":"","sources":["/Users/moe/Documents/syp 5.klasse/frontend_ballermetrics/src/app/auth/ballerservice.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nconst jwt_decode = require('jwt-decode');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BallerserviceService {\n  private accessToken: string | null = null;\n  private refreshTokenv: string | null = null;\n\n  constructor() { }\n  \n  login(email: string, password: string): Observable<void> {\n    // Make login request, obtain tokens, and save them\n    const url = 'https://ballermetrics-backend2.onrender.com/registration/authenticate';\n\n    console.log(url);\n\n    var user = {\n      email: email,\n      password: password\n    }\n\n    console.log(user);\n\n    var init: RequestInit = {\n      method : 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    };\n\n    console.log(init);\n\n    \n\n    fetch(url, init)\n    .then(res => {\n      if(!res.ok){\n        console.log(\"fetch fehler\");\n      }\n      return res.json();\n    }).then(json => {\n      console.log(json);\n      this.accessToken = json['accesstoken'];\n      this.refreshTokenv = json['refreshtoken'];\n      console.log(this.accessToken);\n      console.log(this.refreshTokenv);\n\n      localStorage.setItem('accesstoken', json['accesstoken']);\n      console.log(localStorage.getItem('accesstoken'));\n\n      localStorage.setItem('refreshtoken', json['refreshtoken']);\n      console.log(\"hier ist der Refreshtoken: \"+localStorage.getItem('refreshtoken'));\n      const currentTimeMillis: number = Math.floor(new Date().getTime() / 1000);\n      const oneDayInSeconds: number = 24 * 60 * 60; // 24 hours * 60 minutes * 60 seconds\n\n      const futureTimeMillis: number = currentTimeMillis + oneDayInSeconds;\n\n      localStorage.setItem('refreshtokenexp', \"\"+futureTimeMillis);\n\n      const accessLogin = localStorage.getItem('accesstoken');\n\n      console.log(jwt_decode(accessLogin))\n      \n\n\n      \n    }).catch(err => {\n      console.log(err);\n    });\n    return null;\n  }\n\n  authenticate(number: string){\n    const token = localStorage.getItem('accesstoken');\n    console.log(token);\n    const url = `registration/login/`+token+\"/\"+number;\n  \n    var myHeaders = new Headers();\n    myHeaders.append(\"Authorization\", \"Bearer \" + token);\n\n    var requestOptions: RequestInit = {\n      method: 'GET',\n      headers: myHeaders,\n      redirect: 'follow'\n    };\n\n    console.log(url,requestOptions);\n\n    fetch(url)\n    .then(res => {\n      if(!res.ok)\n      {\n        console.log(\"fetch fehler\");\n      }\n      return res.json();\n    }).then(json => {\n      console.log(json);\n      localStorage.setItem('accesstokenauth', json['token']);\n    }).catch(err => console.log(err));\n\n\n  }\n\n  refreshToken(): void {\n    // Make refresh token request, obtain a new access token, and update the saved token\n    const url = `registration/refresh`;\n        \n        const refreshToken = localStorage.getItem('refreshtoken');\n        console.log(refreshToken);\n\n        var tkn = {\n        refreshToken: refreshToken\n        }\n\n        console.log(tkn);\n\n        var init: RequestInit = {\n        method : 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(tkn)\n        };\n\n        console.log(init);\n\n        fetch(url, init)\n        .then(res => {\n        if(!res.ok)\n        {\n            console.log(\"fetch fehler\");\n        }\n        return res.json();\n        }).then(json => {\n        console.log(json);\n        localStorage.setItem('accesstoken', json['accesstoken']);\n        \n\n        localStorage.setItem('refreshtoken', json['refreshtoken']);\n        \n\n        \n        }).catch(err => console.log(err));\n\n  }\n\n  isAuthenticatedAccessToken(): boolean {\n    const accessLogin = localStorage.getItem('accesstoken');\n    const accessauth = localStorage.getItem('accesstokenauth');\n\n    const decodedToken: any = jwt_decode(accessLogin);\n\n    const exp: number = decodedToken.exp;\n\n    const currentTimeMillis: number = Math.floor(new Date().getTime() / 1000);\n\n    const check = exp - currentTimeMillis;\n\n    if(check < 0)\n    {\n      return false;\n    }\n    else{\n      return true;\n    }\n\n  }\n\n  isAuthenticatedRefreshtokenToken(): boolean {\n    /*const refreshtoken = localStorage.getItem('refreshtoken');\n\n    const currentTimeMillis = new Date().getTime();\n    let millis: number = 0;\n    \n\n    console.log(refreshtoken);\n\n    const url = `${environment.apiUrl}registration/getExpireDate`;\n\n    console.log(url);\n    var token = {\n        refreshToken: refreshtoken\n      }\n  \n      \n  \n      var init: RequestInit = {\n        method : 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(token)\n      };\n  \n      console.log(init);\n\n      fetch(url, init)\n      .then(res => {\n      if(!res.ok)\n      {\n          console.log(\"fetch fehler\");\n      }\n      return res.json();\n      }).then(json => {\n      console.log(json);\n      millis = json;\n\n      \n      }).catch(err => console.log(err));\n\n\n      const check = millis - currentTimeMillis;*/\n\n      /*const refreshToken = localStorage.getItem('refreshtokenexp');\n\n        console.log(refreshToken);\n\n        const n = parseInt(refreshToken);\n\n        const currentTimeMillis: number = Math.floor(new Date().getTime() / 1000);\n\n        const check = n - currentTimeMillis;\n        console.log(check);*/\n\n        const refreshToken = localStorage.getItem('refreshtokenexp');\n\n        console.log(refreshToken);\n\n        const n = parseInt(refreshToken);\n\n        const currentTimeMillis: number = Math.floor(new Date().getTime() / 1000);\n\n        const check = n - currentTimeMillis;\n        console.log(check);\n\n\n        if(check < 0)\n        {\n          return false;\n        }\n        else{\n          return true;\n        }\n  }\n\n  isTokenEmpty(): boolean\n  {\n    const accessLogin = localStorage.getItem('accesstoken');\n            const refreshToken = localStorage.getItem('refreshtoken');\n            console.log(accessLogin);\n\n            if(accessLogin == null && refreshToken == null)\n            {\n                \n            return true;\n            }\n            else{\n               \n            return false;\n            }\n    \n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}