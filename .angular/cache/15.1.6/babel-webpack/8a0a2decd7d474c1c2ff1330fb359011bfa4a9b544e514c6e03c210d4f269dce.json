{"ast":null,"code":"import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, ViewChild, Output, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ObjectUtils } from 'primeng/utils';\nconst _c0 = [\"cb\"];\nconst _c1 = function (a1, a2, a3) {\n  return {\n    \"p-checkbox-label\": true,\n    \"p-checkbox-label-active\": a1,\n    \"p-disabled\": a2,\n    \"p-checkbox-label-focus\": a3\n  };\n};\nfunction Checkbox_label_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"label\", 7);\n    i0.ɵɵlistener(\"click\", function Checkbox_label_6_Template_label_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      const _r0 = i0.ɵɵreference(3);\n      return i0.ɵɵresetView(ctx_r2.onClick($event, _r0, true));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.labelStyleClass);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(5, _c1, ctx_r1.checked(), ctx_r1.disabled, ctx_r1.focused));\n    i0.ɵɵattribute(\"for\", ctx_r1.inputId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.label);\n  }\n}\nconst _c2 = function (a1, a2, a3) {\n  return {\n    \"p-checkbox p-component\": true,\n    \"p-checkbox-checked\": a1,\n    \"p-checkbox-disabled\": a2,\n    \"p-checkbox-focused\": a3\n  };\n};\nconst _c3 = function (a0, a1, a2) {\n  return {\n    \"p-highlight\": a0,\n    \"p-disabled\": a1,\n    \"p-focus\": a2\n  };\n};\nconst CHECKBOX_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Checkbox),\n  multi: true\n};\nlet Checkbox = /*#__PURE__*/(() => {\n  class Checkbox {\n    constructor(cd) {\n      this.cd = cd;\n      this.checkboxIcon = 'pi pi-check';\n      this.trueValue = true;\n      this.falseValue = false;\n      this.onChange = new EventEmitter();\n      this.onModelChange = () => {};\n      this.onModelTouched = () => {};\n      this.focused = false;\n    }\n    onClick(event, checkbox, focus) {\n      event.preventDefault();\n      if (this.disabled || this.readonly) {\n        return;\n      }\n      this.updateModel(event);\n      if (focus) {\n        checkbox.focus();\n      }\n    }\n    updateModel(event) {\n      let newModelValue;\n      if (!this.binary) {\n        if (this.checked()) newModelValue = this.model.filter(val => !ObjectUtils.equals(val, this.value));else newModelValue = this.model ? [...this.model, this.value] : [this.value];\n        this.onModelChange(newModelValue);\n        this.model = newModelValue;\n        if (this.formControl) {\n          this.formControl.setValue(newModelValue);\n        }\n      } else {\n        newModelValue = this.checked() ? this.falseValue : this.trueValue;\n        this.model = newModelValue;\n        this.onModelChange(newModelValue);\n      }\n      this.onChange.emit({\n        checked: newModelValue,\n        originalEvent: event\n      });\n    }\n    handleChange(event) {\n      if (!this.readonly) {\n        this.updateModel(event);\n      }\n    }\n    onFocus() {\n      this.focused = true;\n    }\n    onBlur() {\n      this.focused = false;\n      this.onModelTouched();\n    }\n    focus() {\n      this.inputViewChild.nativeElement.focus();\n    }\n    writeValue(model) {\n      this.model = model;\n      this.cd.markForCheck();\n    }\n    registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n    setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n    checked() {\n      return this.binary ? this.model === this.trueValue : ObjectUtils.contains(this.value, this.model);\n    }\n  }\n  Checkbox.ɵfac = function Checkbox_Factory(t) {\n    return new (t || Checkbox)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  Checkbox.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Checkbox,\n    selectors: [[\"p-checkbox\"]],\n    viewQuery: function Checkbox_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputViewChild = _t.first);\n      }\n    },\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      value: \"value\",\n      name: \"name\",\n      disabled: \"disabled\",\n      binary: \"binary\",\n      label: \"label\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      ariaLabel: \"ariaLabel\",\n      tabindex: \"tabindex\",\n      inputId: \"inputId\",\n      style: \"style\",\n      styleClass: \"styleClass\",\n      labelStyleClass: \"labelStyleClass\",\n      formControl: \"formControl\",\n      checkboxIcon: \"checkboxIcon\",\n      readonly: \"readonly\",\n      required: \"required\",\n      trueValue: \"trueValue\",\n      falseValue: \"falseValue\"\n    },\n    outputs: {\n      onChange: \"onChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([CHECKBOX_VALUE_ACCESSOR])],\n    decls: 7,\n    vars: 26,\n    consts: [[3, \"ngStyle\", \"ngClass\"], [1, \"p-hidden-accessible\"], [\"type\", \"checkbox\", 3, \"readonly\", \"value\", \"checked\", \"disabled\", \"focus\", \"blur\", \"change\"], [\"cb\", \"\"], [1, \"p-checkbox-box\", 3, \"ngClass\", \"click\"], [1, \"p-checkbox-icon\", 3, \"ngClass\"], [3, \"class\", \"ngClass\", \"click\", 4, \"ngIf\"], [3, \"ngClass\", \"click\"]],\n    template: function Checkbox_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r4 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"input\", 2, 3);\n        i0.ɵɵlistener(\"focus\", function Checkbox_Template_input_focus_2_listener() {\n          return ctx.onFocus();\n        })(\"blur\", function Checkbox_Template_input_blur_2_listener() {\n          return ctx.onBlur();\n        })(\"change\", function Checkbox_Template_input_change_2_listener($event) {\n          return ctx.handleChange($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵlistener(\"click\", function Checkbox_Template_div_click_4_listener($event) {\n          i0.ɵɵrestoreView(_r4);\n          const _r0 = i0.ɵɵreference(3);\n          return i0.ɵɵresetView(ctx.onClick($event, _r0, true));\n        });\n        i0.ɵɵelement(5, \"span\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(6, Checkbox_label_6_Template, 2, 9, \"label\", 6);\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngStyle\", ctx.style)(\"ngClass\", i0.ɵɵpureFunction3(18, _c2, ctx.checked(), ctx.disabled, ctx.focused));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"readonly\", ctx.readonly)(\"value\", ctx.value)(\"checked\", ctx.checked())(\"disabled\", ctx.disabled);\n        i0.ɵɵattribute(\"id\", ctx.inputId)(\"name\", ctx.name)(\"tabindex\", ctx.tabindex)(\"aria-labelledby\", ctx.ariaLabelledBy)(\"aria-label\", ctx.ariaLabel)(\"aria-checked\", ctx.checked())(\"required\", ctx.required);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(22, _c3, ctx.checked(), ctx.disabled, ctx.focused));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", ctx.checked() ? ctx.checkboxIcon : null);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.label);\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgIf, i1.NgStyle],\n    styles: [\".p-checkbox{display:inline-flex;cursor:pointer;-webkit-user-select:none;user-select:none;vertical-align:bottom;position:relative}.p-checkbox-disabled{cursor:default!important;pointer-events:none}.p-checkbox-box{display:flex;justify-content:center;align-items:center}p-checkbox{display:inline-flex;vertical-align:bottom;align-items:center}.p-checkbox-label{line-height:1}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return Checkbox;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet CheckboxModule = /*#__PURE__*/(() => {\n  class CheckboxModule {}\n  CheckboxModule.ɵfac = function CheckboxModule_Factory(t) {\n    return new (t || CheckboxModule)();\n  };\n  CheckboxModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: CheckboxModule\n  });\n  CheckboxModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return CheckboxModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CHECKBOX_VALUE_ACCESSOR, Checkbox, CheckboxModule };\n//# sourceMappingURL=primeng-checkbox.mjs.map\n//# sourceMappingURL=primeng-checkbox.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}