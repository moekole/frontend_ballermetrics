{"ast":null,"code":"import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, ViewChild, Output, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i3 from 'primeng/autofocus';\nimport { AutoFocusModule } from 'primeng/autofocus';\nimport { DomHandler } from 'primeng/dom';\nimport * as i2 from 'primeng/inputtext';\nimport { InputTextModule } from 'primeng/inputtext';\n\n/*\n    Port of jQuery MaskedInput by DigitalBush as a Native Angular2 Component in Typescript without jQuery\n    https://github.com/digitalBush/jquery.maskedinput/\n\n    Copyright (c) 2007-2014 Josh Bush (digitalbush.com)\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without\n    restriction, including without limitation the rights to use,\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following\n    conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n*/\nconst _c0 = [\"input\"];\nfunction InputMask_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"i\", 3);\n    i0.ɵɵlistener(\"click\", function InputMask_i_2_Template_i_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.clear());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nconst INPUTMASK_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => InputMask),\n  multi: true\n};\nlet InputMask = /*#__PURE__*/(() => {\n  class InputMask {\n    constructor(el, cd) {\n      this.el = el;\n      this.cd = cd;\n      this.type = 'text';\n      this.slotChar = '_';\n      this.autoClear = true;\n      this.showClear = false;\n      this.characterPattern = '[A-Za-z]';\n      this.keepBuffer = false;\n      this.onComplete = new EventEmitter();\n      this.onFocus = new EventEmitter();\n      this.onBlur = new EventEmitter();\n      this.onInput = new EventEmitter();\n      this.onKeydown = new EventEmitter();\n      this.onClear = new EventEmitter();\n      this.onModelChange = () => {};\n      this.onModelTouched = () => {};\n    }\n    ngOnInit() {\n      let ua = DomHandler.getUserAgent();\n      this.androidChrome = /chrome/i.test(ua) && /android/i.test(ua);\n      this.initMask();\n    }\n    get mask() {\n      return this._mask;\n    }\n    set mask(val) {\n      this._mask = val;\n      this.initMask();\n      this.writeValue('');\n      this.onModelChange(this.value);\n    }\n    initMask() {\n      this.tests = [];\n      this.partialPosition = this.mask.length;\n      this.len = this.mask.length;\n      this.firstNonMaskPos = null;\n      this.defs = {\n        '9': '[0-9]',\n        a: this.characterPattern,\n        '*': `${this.characterPattern}|[0-9]`\n      };\n      let maskTokens = this.mask.split('');\n      for (let i = 0; i < maskTokens.length; i++) {\n        let c = maskTokens[i];\n        if (c == '?') {\n          this.len--;\n          this.partialPosition = i;\n        } else if (this.defs[c]) {\n          this.tests.push(new RegExp(this.defs[c]));\n          if (this.firstNonMaskPos === null) {\n            this.firstNonMaskPos = this.tests.length - 1;\n          }\n          if (i < this.partialPosition) {\n            this.lastRequiredNonMaskPos = this.tests.length - 1;\n          }\n        } else {\n          this.tests.push(null);\n        }\n      }\n      this.buffer = [];\n      for (let i = 0; i < maskTokens.length; i++) {\n        let c = maskTokens[i];\n        if (c != '?') {\n          if (this.defs[c]) this.buffer.push(this.getPlaceholder(i));else this.buffer.push(c);\n        }\n      }\n      this.defaultBuffer = this.buffer.join('');\n    }\n    writeValue(value) {\n      this.value = value;\n      if (this.inputViewChild && this.inputViewChild.nativeElement) {\n        if (this.value == undefined || this.value == null) this.inputViewChild.nativeElement.value = '';else this.inputViewChild.nativeElement.value = this.value;\n        this.checkVal();\n        this.focusText = this.inputViewChild.nativeElement.value;\n        this.updateFilledState();\n      }\n    }\n    registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n    setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n    caret(first, last) {\n      let range, begin, end;\n      if (!this.inputViewChild.nativeElement.offsetParent || this.inputViewChild.nativeElement !== this.inputViewChild.nativeElement.ownerDocument.activeElement) {\n        return;\n      }\n      if (typeof first == 'number') {\n        begin = first;\n        end = typeof last === 'number' ? last : begin;\n        if (this.inputViewChild.nativeElement.setSelectionRange) {\n          this.inputViewChild.nativeElement.setSelectionRange(begin, end);\n        } else if (this.inputViewChild.nativeElement['createTextRange']) {\n          range = this.inputViewChild.nativeElement['createTextRange']();\n          range.collapse(true);\n          range.moveEnd('character', end);\n          range.moveStart('character', begin);\n          range.select();\n        }\n      } else {\n        if (this.inputViewChild.nativeElement.setSelectionRange) {\n          begin = this.inputViewChild.nativeElement.selectionStart;\n          end = this.inputViewChild.nativeElement.selectionEnd;\n        } else if (document['selection'] && document['selection'].createRange) {\n          range = document['selection'].createRange();\n          begin = 0 - range.duplicate().moveStart('character', -100000);\n          end = begin + range.text.length;\n        }\n        return {\n          begin: begin,\n          end: end\n        };\n      }\n    }\n    isCompleted() {\n      let completed;\n      for (let i = this.firstNonMaskPos; i <= this.lastRequiredNonMaskPos; i++) {\n        if (this.tests[i] && this.buffer[i] === this.getPlaceholder(i)) {\n          return false;\n        }\n      }\n      return true;\n    }\n    getPlaceholder(i) {\n      if (i < this.slotChar.length) {\n        return this.slotChar.charAt(i);\n      }\n      return this.slotChar.charAt(0);\n    }\n    seekNext(pos) {\n      while (++pos < this.len && !this.tests[pos]);\n      return pos;\n    }\n    seekPrev(pos) {\n      while (--pos >= 0 && !this.tests[pos]);\n      return pos;\n    }\n    shiftL(begin, end) {\n      let i, j;\n      if (begin < 0) {\n        return;\n      }\n      for (i = begin, j = this.seekNext(end); i < this.len; i++) {\n        if (this.tests[i]) {\n          if (j < this.len && this.tests[i].test(this.buffer[j])) {\n            this.buffer[i] = this.buffer[j];\n            this.buffer[j] = this.getPlaceholder(j);\n          } else {\n            break;\n          }\n          j = this.seekNext(j);\n        }\n      }\n      this.writeBuffer();\n      this.caret(Math.max(this.firstNonMaskPos, begin));\n    }\n    shiftR(pos) {\n      let i, c, j, t;\n      for (i = pos, c = this.getPlaceholder(pos); i < this.len; i++) {\n        if (this.tests[i]) {\n          j = this.seekNext(i);\n          t = this.buffer[i];\n          this.buffer[i] = c;\n          if (j < this.len && this.tests[j].test(t)) {\n            c = t;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n    handleAndroidInput(e) {\n      var curVal = this.inputViewChild.nativeElement.value;\n      var pos = this.caret();\n      if (this.oldVal && this.oldVal.length && this.oldVal.length > curVal.length) {\n        // a deletion or backspace happened\n        this.checkVal(true);\n        while (pos.begin > 0 && !this.tests[pos.begin - 1]) pos.begin--;\n        if (pos.begin === 0) {\n          while (pos.begin < this.firstNonMaskPos && !this.tests[pos.begin]) pos.begin++;\n        }\n        setTimeout(() => {\n          this.caret(pos.begin, pos.begin);\n          this.updateModel(e);\n          if (this.isCompleted()) {\n            this.onComplete.emit();\n          }\n        }, 0);\n      } else {\n        this.checkVal(true);\n        while (pos.begin < this.len && !this.tests[pos.begin]) pos.begin++;\n        setTimeout(() => {\n          this.caret(pos.begin, pos.begin);\n          this.updateModel(e);\n          if (this.isCompleted()) {\n            this.onComplete.emit();\n          }\n        }, 0);\n      }\n    }\n    onInputBlur(e) {\n      this.focused = false;\n      this.onModelTouched();\n      if (!this.keepBuffer) {\n        this.checkVal();\n      }\n      this.updateFilledState();\n      this.onBlur.emit(e);\n      if (this.inputViewChild.nativeElement.value != this.focusText || this.inputViewChild.nativeElement.value != this.value) {\n        this.updateModel(e);\n        let event = document.createEvent('HTMLEvents');\n        event.initEvent('change', true, false);\n        this.inputViewChild.nativeElement.dispatchEvent(event);\n      }\n    }\n    onInputKeydown(e) {\n      if (this.readonly) {\n        return;\n      }\n      let k = e.which || e.keyCode,\n        pos,\n        begin,\n        end;\n      let iPhone = /iphone/i.test(DomHandler.getUserAgent());\n      this.oldVal = this.inputViewChild.nativeElement.value;\n      this.onKeydown.emit(e);\n      //backspace, delete, and escape get special treatment\n      if (k === 8 || k === 46 || iPhone && k === 127) {\n        pos = this.caret();\n        begin = pos.begin;\n        end = pos.end;\n        if (end - begin === 0) {\n          begin = k !== 46 ? this.seekPrev(begin) : end = this.seekNext(begin - 1);\n          end = k === 46 ? this.seekNext(end) : end;\n        }\n        this.clearBuffer(begin, end);\n        if (this.keepBuffer) {\n          this.shiftL(begin, end - 2);\n        } else {\n          this.shiftL(begin, end - 1);\n        }\n        this.updateModel(e);\n        this.onInput.emit(e);\n        e.preventDefault();\n      } else if (k === 13) {\n        // enter\n        this.onInputBlur(e);\n        this.updateModel(e);\n      } else if (k === 27) {\n        // escape\n        this.inputViewChild.nativeElement.value = this.focusText;\n        this.caret(0, this.checkVal());\n        this.updateModel(e);\n        e.preventDefault();\n      }\n    }\n    onKeyPress(e) {\n      if (this.readonly) {\n        return;\n      }\n      var k = e.which || e.keyCode,\n        pos = this.caret(),\n        p,\n        c,\n        next,\n        completed;\n      if (e.ctrlKey || e.altKey || e.metaKey || k < 32 || k > 34 && k < 41) {\n        //Ignore\n        return;\n      } else if (k && k !== 13) {\n        if (pos.end - pos.begin !== 0) {\n          this.clearBuffer(pos.begin, pos.end);\n          this.shiftL(pos.begin, pos.end - 1);\n        }\n        p = this.seekNext(pos.begin - 1);\n        if (p < this.len) {\n          c = String.fromCharCode(k);\n          if (this.tests[p].test(c)) {\n            this.shiftR(p);\n            this.buffer[p] = c;\n            this.writeBuffer();\n            next = this.seekNext(p);\n            if (/android/i.test(DomHandler.getUserAgent())) {\n              //Path for CSP Violation on FireFox OS 1.1\n              let proxy = () => {\n                this.caret(next);\n              };\n              setTimeout(proxy, 0);\n            } else {\n              this.caret(next);\n            }\n            if (pos.begin <= this.lastRequiredNonMaskPos) {\n              completed = this.isCompleted();\n            }\n            this.onInput.emit(e);\n          }\n        }\n        e.preventDefault();\n      }\n      this.updateModel(e);\n      this.updateFilledState();\n      if (completed) {\n        this.onComplete.emit();\n      }\n    }\n    clearBuffer(start, end) {\n      if (!this.keepBuffer) {\n        let i;\n        for (i = start; i < end && i < this.len; i++) {\n          if (this.tests[i]) {\n            this.buffer[i] = this.getPlaceholder(i);\n          }\n        }\n      }\n    }\n    writeBuffer() {\n      this.inputViewChild.nativeElement.value = this.buffer.join('');\n    }\n    checkVal(allow) {\n      //try to place characters where they belong\n      let test = this.inputViewChild.nativeElement.value,\n        lastMatch = -1,\n        i,\n        c,\n        pos;\n      for (i = 0, pos = 0; i < this.len; i++) {\n        if (this.tests[i]) {\n          this.buffer[i] = this.getPlaceholder(i);\n          while (pos++ < test.length) {\n            c = test.charAt(pos - 1);\n            if (this.tests[i].test(c)) {\n              if (!this.keepBuffer) {\n                this.buffer[i] = c;\n              }\n              lastMatch = i;\n              break;\n            }\n          }\n          if (pos > test.length) {\n            this.clearBuffer(i + 1, this.len);\n            break;\n          }\n        } else {\n          if (this.buffer[i] === test.charAt(pos)) {\n            pos++;\n          }\n          if (i < this.partialPosition) {\n            lastMatch = i;\n          }\n        }\n      }\n      if (allow) {\n        this.writeBuffer();\n      } else if (lastMatch + 1 < this.partialPosition) {\n        if (this.autoClear || this.buffer.join('') === this.defaultBuffer) {\n          // Invalid value. Remove it and replace it with the\n          // mask, which is the default behavior.\n          if (this.inputViewChild.nativeElement.value) this.inputViewChild.nativeElement.value = '';\n          this.clearBuffer(0, this.len);\n        } else {\n          // Invalid value, but we opt to show the value to the\n          // user and allow them to correct their mistake.\n          this.writeBuffer();\n        }\n      } else {\n        this.writeBuffer();\n        this.inputViewChild.nativeElement.value = this.inputViewChild.nativeElement.value.substring(0, lastMatch + 1);\n      }\n      return this.partialPosition ? i : this.firstNonMaskPos;\n    }\n    onInputFocus(event) {\n      if (this.readonly) {\n        return;\n      }\n      this.focused = true;\n      clearTimeout(this.caretTimeoutId);\n      let pos;\n      this.focusText = this.inputViewChild.nativeElement.value;\n      pos = this.keepBuffer ? this.inputViewChild.nativeElement.value.length : this.checkVal();\n      this.caretTimeoutId = setTimeout(() => {\n        if (this.inputViewChild.nativeElement !== this.inputViewChild.nativeElement.ownerDocument.activeElement) {\n          return;\n        }\n        this.writeBuffer();\n        if (pos == this.mask.replace('?', '').length) {\n          this.caret(0, pos);\n        } else {\n          this.caret(pos);\n        }\n      }, 10);\n      this.onFocus.emit(event);\n    }\n    onInputChange(event) {\n      if (this.androidChrome) this.handleAndroidInput(event);else this.handleInputChange(event);\n      this.onInput.emit(event);\n    }\n    handleInputChange(event) {\n      if (this.readonly) {\n        return;\n      }\n      setTimeout(() => {\n        var pos = this.checkVal(true);\n        this.caret(pos);\n        this.updateModel(event);\n        if (this.isCompleted()) {\n          this.onComplete.emit();\n        }\n      }, 0);\n    }\n    getUnmaskedValue() {\n      let unmaskedBuffer = [];\n      for (let i = 0; i < this.buffer.length; i++) {\n        let c = this.buffer[i];\n        if (this.tests[i] && c != this.getPlaceholder(i)) {\n          unmaskedBuffer.push(c);\n        }\n      }\n      return unmaskedBuffer.join('');\n    }\n    updateModel(e) {\n      const updatedValue = this.unmask ? this.getUnmaskedValue() : e.target.value;\n      if (updatedValue !== null || updatedValue !== undefined) {\n        this.value = updatedValue;\n        this.onModelChange(this.value);\n      }\n    }\n    updateFilledState() {\n      this.filled = this.inputViewChild.nativeElement && this.inputViewChild.nativeElement.value != '';\n    }\n    focus() {\n      this.inputViewChild.nativeElement.focus();\n    }\n    clear() {\n      this.inputViewChild.nativeElement.value = '';\n      this.value = null;\n      this.onModelChange(this.value);\n      this.onClear.emit();\n    }\n  }\n  InputMask.ɵfac = function InputMask_Factory(t) {\n    return new (t || InputMask)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  InputMask.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: InputMask,\n    selectors: [[\"p-inputMask\"]],\n    viewQuery: function InputMask_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputViewChild = _t.first);\n      }\n    },\n    hostAttrs: [1, \"p-element\"],\n    hostVars: 6,\n    hostBindings: function InputMask_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"p-inputwrapper-filled\", ctx.filled)(\"p-inputwrapper-focus\", ctx.focused)(\"p-inputmask-clearable\", ctx.showClear && !ctx.disabled);\n      }\n    },\n    inputs: {\n      type: \"type\",\n      slotChar: \"slotChar\",\n      autoClear: \"autoClear\",\n      showClear: \"showClear\",\n      style: \"style\",\n      inputId: \"inputId\",\n      styleClass: \"styleClass\",\n      placeholder: \"placeholder\",\n      size: \"size\",\n      maxlength: \"maxlength\",\n      tabindex: \"tabindex\",\n      title: \"title\",\n      ariaLabel: \"ariaLabel\",\n      ariaRequired: \"ariaRequired\",\n      disabled: \"disabled\",\n      readonly: \"readonly\",\n      unmask: \"unmask\",\n      name: \"name\",\n      required: \"required\",\n      characterPattern: \"characterPattern\",\n      autoFocus: \"autoFocus\",\n      autocomplete: \"autocomplete\",\n      keepBuffer: \"keepBuffer\",\n      mask: \"mask\"\n    },\n    outputs: {\n      onComplete: \"onComplete\",\n      onFocus: \"onFocus\",\n      onBlur: \"onBlur\",\n      onInput: \"onInput\",\n      onKeydown: \"onKeydown\",\n      onClear: \"onClear\"\n    },\n    features: [i0.ɵɵProvidersFeature([INPUTMASK_VALUE_ACCESSOR])],\n    decls: 3,\n    vars: 18,\n    consts: [[\"pInputText\", \"\", \"pAutoFocus\", \"\", 1, \"p-inputmask\", 3, \"ngStyle\", \"ngClass\", \"disabled\", \"readonly\", \"autofocus\", \"focus\", \"blur\", \"keydown\", \"keypress\", \"input\", \"paste\"], [\"input\", \"\"], [\"class\", \"p-inputmask-clear-icon pi pi-times\", 3, \"click\", 4, \"ngIf\"], [1, \"p-inputmask-clear-icon\", \"pi\", \"pi-times\", 3, \"click\"]],\n    template: function InputMask_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"input\", 0, 1);\n        i0.ɵɵlistener(\"focus\", function InputMask_Template_input_focus_0_listener($event) {\n          return ctx.onInputFocus($event);\n        })(\"blur\", function InputMask_Template_input_blur_0_listener($event) {\n          return ctx.onInputBlur($event);\n        })(\"keydown\", function InputMask_Template_input_keydown_0_listener($event) {\n          return ctx.onInputKeydown($event);\n        })(\"keypress\", function InputMask_Template_input_keypress_0_listener($event) {\n          return ctx.onKeyPress($event);\n        })(\"input\", function InputMask_Template_input_input_0_listener($event) {\n          return ctx.onInputChange($event);\n        })(\"paste\", function InputMask_Template_input_paste_0_listener($event) {\n          return ctx.handleInputChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, InputMask_i_2_Template, 1, 0, \"i\", 2);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngStyle\", ctx.style)(\"ngClass\", ctx.styleClass)(\"disabled\", ctx.disabled)(\"readonly\", ctx.readonly)(\"autofocus\", ctx.autoFocus);\n        i0.ɵɵattribute(\"id\", ctx.inputId)(\"type\", ctx.type)(\"name\", ctx.name)(\"placeholder\", ctx.placeholder)(\"title\", ctx.title)(\"size\", ctx.size)(\"autocomplete\", ctx.autocomplete)(\"maxlength\", ctx.maxlength)(\"tabindex\", ctx.tabindex)(\"aria-label\", ctx.ariaLabel)(\"aria-required\", ctx.ariaRequired)(\"required\", ctx.required);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.value != null && ctx.filled && ctx.showClear && !ctx.disabled);\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgIf, i1.NgStyle, i2.InputText, i3.AutoFocus],\n    styles: [\".p-inputmask-clear-icon{position:absolute;top:50%;margin-top:-.5rem;cursor:pointer}.p-inputmask-clearable{position:relative}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return InputMask;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet InputMaskModule = /*#__PURE__*/(() => {\n  class InputMaskModule {}\n  InputMaskModule.ɵfac = function InputMaskModule_Factory(t) {\n    return new (t || InputMaskModule)();\n  };\n  InputMaskModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: InputMaskModule\n  });\n  InputMaskModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, InputTextModule, AutoFocusModule]\n  });\n  return InputMaskModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INPUTMASK_VALUE_ACCESSOR, InputMask, InputMaskModule };\n//# sourceMappingURL=primeng-inputmask.mjs.map\n//# sourceMappingURL=primeng-inputmask.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}