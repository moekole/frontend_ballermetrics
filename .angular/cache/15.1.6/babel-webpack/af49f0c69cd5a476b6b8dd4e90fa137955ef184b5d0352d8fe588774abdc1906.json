{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, Input, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler } from 'primeng/dom';\nimport { PrimeTemplate } from 'primeng/api';\nconst _c0 = [\"container\"];\nconst _c1 = [\"content\"];\nconst _c2 = [\"xBar\"];\nconst _c3 = [\"yBar\"];\nfunction ScrollPanel_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c4 = [\"*\"];\nlet ScrollPanel = /*#__PURE__*/(() => {\n  class ScrollPanel {\n    constructor(el, zone, cd) {\n      this.el = el;\n      this.zone = zone;\n      this.cd = cd;\n      this.timeoutFrame = fn => setTimeout(fn, 0);\n    }\n    ngAfterViewInit() {\n      this.zone.runOutsideAngular(() => {\n        this.moveBar();\n        this.moveBar = this.moveBar.bind(this);\n        this.onXBarMouseDown = this.onXBarMouseDown.bind(this);\n        this.onYBarMouseDown = this.onYBarMouseDown.bind(this);\n        this.onDocumentMouseMove = this.onDocumentMouseMove.bind(this);\n        this.onDocumentMouseUp = this.onDocumentMouseUp.bind(this);\n        window.addEventListener('resize', this.moveBar);\n        this.contentViewChild.nativeElement.addEventListener('scroll', this.moveBar);\n        this.contentViewChild.nativeElement.addEventListener('mouseenter', this.moveBar);\n        this.xBarViewChild.nativeElement.addEventListener('mousedown', this.onXBarMouseDown);\n        this.yBarViewChild.nativeElement.addEventListener('mousedown', this.onYBarMouseDown);\n        this.calculateContainerHeight();\n        this.initialized = true;\n      });\n    }\n    ngAfterContentInit() {\n      this.templates.forEach(item => {\n        switch (item.getType()) {\n          case 'content':\n            this.contentTemplate = item.template;\n            break;\n          default:\n            this.contentTemplate = item.template;\n            break;\n        }\n      });\n    }\n    calculateContainerHeight() {\n      let container = this.containerViewChild.nativeElement;\n      let content = this.contentViewChild.nativeElement;\n      let xBar = this.xBarViewChild.nativeElement;\n      let containerStyles = getComputedStyle(container),\n        xBarStyles = getComputedStyle(xBar),\n        pureContainerHeight = DomHandler.getHeight(container) - parseInt(xBarStyles['height'], 10);\n      if (containerStyles['max-height'] != 'none' && pureContainerHeight == 0) {\n        if (content.offsetHeight + parseInt(xBarStyles['height'], 10) > parseInt(containerStyles['max-height'], 10)) {\n          container.style.height = containerStyles['max-height'];\n        } else {\n          container.style.height = content.offsetHeight + parseFloat(containerStyles.paddingTop) + parseFloat(containerStyles.paddingBottom) + parseFloat(containerStyles.borderTopWidth) + parseFloat(containerStyles.borderBottomWidth) + 'px';\n        }\n      }\n    }\n    moveBar() {\n      let container = this.containerViewChild.nativeElement;\n      let content = this.contentViewChild.nativeElement;\n      /* horizontal scroll */\n      let xBar = this.xBarViewChild.nativeElement;\n      let totalWidth = content.scrollWidth;\n      let ownWidth = content.clientWidth;\n      let bottom = (container.clientHeight - xBar.clientHeight) * -1;\n      this.scrollXRatio = ownWidth / totalWidth;\n      /* vertical scroll */\n      let yBar = this.yBarViewChild.nativeElement;\n      let totalHeight = content.scrollHeight;\n      let ownHeight = content.clientHeight;\n      let right = (container.clientWidth - yBar.clientWidth) * -1;\n      this.scrollYRatio = ownHeight / totalHeight;\n      this.requestAnimationFrame(() => {\n        if (this.scrollXRatio >= 1) {\n          DomHandler.addClass(xBar, 'p-scrollpanel-hidden');\n        } else {\n          DomHandler.removeClass(xBar, 'p-scrollpanel-hidden');\n          const xBarWidth = Math.max(this.scrollXRatio * 100, 10);\n          const xBarLeft = content.scrollLeft * (100 - xBarWidth) / (totalWidth - ownWidth);\n          xBar.style.cssText = 'width:' + xBarWidth + '%; left:' + xBarLeft + '%;bottom:' + bottom + 'px;';\n        }\n        if (this.scrollYRatio >= 1) {\n          DomHandler.addClass(yBar, 'p-scrollpanel-hidden');\n        } else {\n          DomHandler.removeClass(yBar, 'p-scrollpanel-hidden');\n          const yBarHeight = Math.max(this.scrollYRatio * 100, 10);\n          const yBarTop = content.scrollTop * (100 - yBarHeight) / (totalHeight - ownHeight);\n          yBar.style.cssText = 'height:' + yBarHeight + '%; top: calc(' + yBarTop + '% - ' + xBar.clientHeight + 'px);right:' + right + 'px;';\n        }\n      });\n      this.cd.markForCheck();\n    }\n    onYBarMouseDown(e) {\n      this.isYBarClicked = true;\n      this.lastPageY = e.pageY;\n      DomHandler.addClass(this.yBarViewChild.nativeElement, 'p-scrollpanel-grabbed');\n      DomHandler.addClass(document.body, 'p-scrollpanel-grabbed');\n      document.addEventListener('mousemove', this.onDocumentMouseMove);\n      document.addEventListener('mouseup', this.onDocumentMouseUp);\n      e.preventDefault();\n    }\n    onXBarMouseDown(e) {\n      this.isXBarClicked = true;\n      this.lastPageX = e.pageX;\n      DomHandler.addClass(this.xBarViewChild.nativeElement, 'p-scrollpanel-grabbed');\n      DomHandler.addClass(document.body, 'p-scrollpanel-grabbed');\n      document.addEventListener('mousemove', this.onDocumentMouseMove);\n      document.addEventListener('mouseup', this.onDocumentMouseUp);\n      e.preventDefault();\n    }\n    onDocumentMouseMove(e) {\n      if (this.isXBarClicked) {\n        this.onMouseMoveForXBar(e);\n      } else if (this.isYBarClicked) {\n        this.onMouseMoveForYBar(e);\n      } else {\n        this.onMouseMoveForXBar(e);\n        this.onMouseMoveForYBar(e);\n      }\n    }\n    onMouseMoveForXBar(e) {\n      let deltaX = e.pageX - this.lastPageX;\n      this.lastPageX = e.pageX;\n      this.requestAnimationFrame(() => {\n        this.contentViewChild.nativeElement.scrollLeft += deltaX / this.scrollXRatio;\n      });\n    }\n    onMouseMoveForYBar(e) {\n      let deltaY = e.pageY - this.lastPageY;\n      this.lastPageY = e.pageY;\n      this.requestAnimationFrame(() => {\n        this.contentViewChild.nativeElement.scrollTop += deltaY / this.scrollYRatio;\n      });\n    }\n    scrollTop(scrollTop) {\n      let scrollableHeight = this.contentViewChild.nativeElement.scrollHeight - this.contentViewChild.nativeElement.clientHeight;\n      scrollTop = scrollTop > scrollableHeight ? scrollableHeight : scrollTop > 0 ? scrollTop : 0;\n      this.contentViewChild.nativeElement.scrollTop = scrollTop;\n    }\n    onDocumentMouseUp(e) {\n      DomHandler.removeClass(this.yBarViewChild.nativeElement, 'p-scrollpanel-grabbed');\n      DomHandler.removeClass(this.xBarViewChild.nativeElement, 'p-scrollpanel-grabbed');\n      DomHandler.removeClass(document.body, 'p-scrollpanel-grabbed');\n      document.removeEventListener('mousemove', this.onDocumentMouseMove);\n      document.removeEventListener('mouseup', this.onDocumentMouseUp);\n      this.isXBarClicked = false;\n      this.isYBarClicked = false;\n    }\n    requestAnimationFrame(f) {\n      let frame = window.requestAnimationFrame || this.timeoutFrame;\n      frame(f);\n    }\n    ngOnDestroy() {\n      if (this.initialized) {\n        window.removeEventListener('resize', this.moveBar);\n        this.contentViewChild.nativeElement.removeEventListener('scroll', this.moveBar);\n        this.contentViewChild.nativeElement.removeEventListener('mouseenter', this.moveBar);\n        this.xBarViewChild.nativeElement.removeEventListener('mousedown', this.onXBarMouseDown);\n        this.yBarViewChild.nativeElement.removeEventListener('mousedown', this.onYBarMouseDown);\n      }\n    }\n    refresh() {\n      this.moveBar();\n    }\n  }\n  ScrollPanel.ɵfac = function ScrollPanel_Factory(t) {\n    return new (t || ScrollPanel)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  ScrollPanel.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ScrollPanel,\n    selectors: [[\"p-scrollPanel\"]],\n    contentQueries: function ScrollPanel_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    viewQuery: function ScrollPanel_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n        i0.ɵɵviewQuery(_c3, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.xBarViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.yBarViewChild = _t.first);\n      }\n    },\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      style: \"style\",\n      styleClass: \"styleClass\"\n    },\n    ngContentSelectors: _c4,\n    decls: 11,\n    vars: 5,\n    consts: [[3, \"ngClass\", \"ngStyle\"], [\"container\", \"\"], [1, \"p-scrollpanel-wrapper\"], [1, \"p-scrollpanel-content\"], [\"content\", \"\"], [4, \"ngTemplateOutlet\"], [1, \"p-scrollpanel-bar\", \"p-scrollpanel-bar-x\"], [\"xBar\", \"\"], [1, \"p-scrollpanel-bar\", \"p-scrollpanel-bar-y\"], [\"yBar\", \"\"]],\n    template: function ScrollPanel_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0, 1)(2, \"div\", 2)(3, \"div\", 3, 4);\n        i0.ɵɵprojection(5);\n        i0.ɵɵtemplate(6, ScrollPanel_ng_container_6_Template, 1, 0, \"ng-container\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(7, \"div\", 6, 7)(9, \"div\", 8, 9);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngClass\", \"p-scrollpanel p-component\")(\"ngStyle\", ctx.style);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.contentTemplate);\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgTemplateOutlet, i1.NgStyle],\n    styles: [\".p-scrollpanel-wrapper{overflow:hidden;width:100%;height:100%;position:relative;z-index:1;float:left}.p-scrollpanel-content{height:calc(100% + 18px);width:calc(100% + 18px);padding:0 18px 18px 0;position:relative;overflow:auto;box-sizing:border-box}.p-scrollpanel-bar{position:relative;background:#c1c1c1;border-radius:3px;z-index:2;cursor:pointer;opacity:0;transition:opacity .25s linear}.p-scrollpanel-bar-y{width:9px;top:0}.p-scrollpanel-bar-x{height:9px;bottom:0}.p-scrollpanel-hidden{visibility:hidden}.p-scrollpanel:hover .p-scrollpanel-bar,.p-scrollpanel:active .p-scrollpanel-bar{opacity:1}.p-scrollpanel-grabbed{-webkit-user-select:none;user-select:none}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return ScrollPanel;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ScrollPanelModule = /*#__PURE__*/(() => {\n  class ScrollPanelModule {}\n  ScrollPanelModule.ɵfac = function ScrollPanelModule_Factory(t) {\n    return new (t || ScrollPanelModule)();\n  };\n  ScrollPanelModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ScrollPanelModule\n  });\n  ScrollPanelModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return ScrollPanelModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ScrollPanel, ScrollPanelModule };\n//# sourceMappingURL=primeng-scrollpanel.mjs.map\n//# sourceMappingURL=primeng-scrollpanel.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}