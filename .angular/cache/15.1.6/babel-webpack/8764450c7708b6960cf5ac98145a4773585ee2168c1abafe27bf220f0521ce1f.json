{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport * as i2 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nconst _c0 = function (a0, a1) {\n  return {\n    \"pi-minus\": a0,\n    \"pi-plus\": a1\n  };\n};\nfunction Fieldset_ng_container_2_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 9);\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(1, _c0, !ctx_r4.collapsed, ctx_r4.collapsed));\n  }\n}\nfunction Fieldset_ng_container_2_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Fieldset_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"a\", 7);\n    i0.ɵɵlistener(\"click\", function Fieldset_ng_container_2_Template_a_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.toggle($event));\n    })(\"keydown.enter\", function Fieldset_ng_container_2_Template_a_keydown_enter_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.toggle($event));\n    });\n    i0.ɵɵtemplate(2, Fieldset_ng_container_2_span_2_Template, 1, 4, \"span\", 8);\n    i0.ɵɵtemplate(3, Fieldset_ng_container_2_ng_container_3_Template, 1, 0, \"ng-container\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    const _r1 = i0.ɵɵreference(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"aria-controls\", ctx_r0.id + \"-content\")(\"aria-expanded\", !ctx_r0.collapsed);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.toggleable);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1);\n  }\n}\nfunction Fieldset_ng_template_3_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Fieldset_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵprojection(2, 1);\n    i0.ɵɵtemplate(3, Fieldset_ng_template_3_ng_container_3_Template, 1, 0, \"ng-container\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.legend);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.headerTemplate);\n  }\n}\nfunction Fieldset_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c1 = [\"*\", [[\"p-header\"]]];\nconst _c2 = function (a1, a2) {\n  return {\n    \"p-fieldset p-component\": true,\n    \"p-fieldset-toggleable\": a1,\n    \"p-fieldset-expanded\": a2\n  };\n};\nconst _c3 = function (a0) {\n  return {\n    transitionParams: a0,\n    height: \"0\"\n  };\n};\nconst _c4 = function (a1) {\n  return {\n    value: \"hidden\",\n    params: a1\n  };\n};\nconst _c5 = function (a0) {\n  return {\n    transitionParams: a0,\n    height: \"*\"\n  };\n};\nconst _c6 = function (a1) {\n  return {\n    value: \"visible\",\n    params: a1\n  };\n};\nconst _c7 = [\"*\", \"p-header\"];\nlet idx = 0;\nclass Fieldset {\n  constructor(el) {\n    this.el = el;\n    this.collapsed = false;\n    this.collapsedChange = new EventEmitter();\n    this.onBeforeToggle = new EventEmitter();\n    this.onAfterToggle = new EventEmitter();\n    this.transitionOptions = '400ms cubic-bezier(0.86, 0, 0.07, 1)';\n    this.id = `p-fieldset-${idx++}`;\n  }\n  ngAfterContentInit() {\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'header':\n          this.headerTemplate = item.template;\n          break;\n        case 'content':\n          this.contentTemplate = item.template;\n          break;\n      }\n    });\n  }\n  toggle(event) {\n    if (this.animating) {\n      return false;\n    }\n    this.animating = true;\n    this.onBeforeToggle.emit({\n      originalEvent: event,\n      collapsed: this.collapsed\n    });\n    if (this.collapsed) this.expand(event);else this.collapse(event);\n    this.onAfterToggle.emit({\n      originalEvent: event,\n      collapsed: this.collapsed\n    });\n    event.preventDefault();\n  }\n  expand(event) {\n    this.collapsed = false;\n    this.collapsedChange.emit(this.collapsed);\n  }\n  collapse(event) {\n    this.collapsed = true;\n    this.collapsedChange.emit(this.collapsed);\n  }\n  getBlockableElement() {\n    return this.el.nativeElement.children[0];\n  }\n  onToggleDone() {\n    this.animating = false;\n  }\n}\nFieldset.ɵfac = function Fieldset_Factory(t) {\n  return new (t || Fieldset)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nFieldset.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: Fieldset,\n  selectors: [[\"p-fieldset\"]],\n  contentQueries: function Fieldset_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n    }\n  },\n  hostAttrs: [1, \"p-element\"],\n  inputs: {\n    legend: \"legend\",\n    toggleable: \"toggleable\",\n    collapsed: \"collapsed\",\n    style: \"style\",\n    styleClass: \"styleClass\",\n    transitionOptions: \"transitionOptions\"\n  },\n  outputs: {\n    collapsedChange: \"collapsedChange\",\n    onBeforeToggle: \"onBeforeToggle\",\n    onAfterToggle: \"onAfterToggle\"\n  },\n  ngContentSelectors: _c7,\n  decls: 9,\n  vars: 23,\n  consts: [[3, \"ngClass\", \"ngStyle\"], [1, \"p-fieldset-legend\"], [4, \"ngIf\", \"ngIfElse\"], [\"legendContent\", \"\"], [\"role\", \"region\", 1, \"p-toggleable-content\"], [1, \"p-fieldset-content\"], [4, \"ngTemplateOutlet\"], [\"tabindex\", \"0\", \"pRipple\", \"\", 3, \"click\", \"keydown.enter\"], [\"class\", \"p-fieldset-toggler pi\", 3, \"ngClass\", 4, \"ngIf\"], [1, \"p-fieldset-toggler\", \"pi\", 3, \"ngClass\"], [1, \"p-fieldset-legend-text\"]],\n  template: function Fieldset_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c1);\n      i0.ɵɵelementStart(0, \"fieldset\", 0)(1, \"legend\", 1);\n      i0.ɵɵtemplate(2, Fieldset_ng_container_2_Template, 4, 4, \"ng-container\", 2);\n      i0.ɵɵtemplate(3, Fieldset_ng_template_3_Template, 4, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 4);\n      i0.ɵɵlistener(\"@fieldsetContent.done\", function Fieldset_Template_div_animation_fieldsetContent_done_5_listener() {\n        return ctx.onToggleDone();\n      });\n      i0.ɵɵelementStart(6, \"div\", 5);\n      i0.ɵɵprojection(7);\n      i0.ɵɵtemplate(8, Fieldset_ng_container_8_Template, 1, 0, \"ng-container\", 6);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(4);\n      i0.ɵɵclassMap(ctx.styleClass);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(12, _c2, ctx.toggleable, !ctx.collapsed && ctx.toggleable))(\"ngStyle\", ctx.style);\n      i0.ɵɵattribute(\"id\", ctx.id);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.toggleable)(\"ngIfElse\", _r1);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"@fieldsetContent\", ctx.collapsed ? i0.ɵɵpureFunction1(17, _c4, i0.ɵɵpureFunction1(15, _c3, ctx.transitionOptions)) : i0.ɵɵpureFunction1(21, _c6, i0.ɵɵpureFunction1(19, _c5, ctx.animating ? ctx.transitionOptions : \"0ms\")));\n      i0.ɵɵattribute(\"id\", ctx.id + \"-content\")(\"aria-labelledby\", ctx.id)(\"aria-hidden\", ctx.collapsed);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.contentTemplate);\n    }\n  },\n  dependencies: [i1.NgClass, i1.NgIf, i1.NgTemplateOutlet, i1.NgStyle, i2.Ripple],\n  styles: [\".p-fieldset-legend>a,.p-fieldset-legend>span{display:flex;align-items:center;justify-content:center}.p-fieldset-toggleable .p-fieldset-legend a{cursor:pointer;-webkit-user-select:none;user-select:none;overflow:hidden;position:relative}.p-fieldset-legend-text{line-height:1}.p-fieldset-toggleable.p-fieldset-expanded>.p-toggleable-content:not(.ng-animating){overflow:visible}.p-fieldset-toggleable .p-toggleable-content{overflow:hidden}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('fieldsetContent', [state('hidden', style({\n      height: '0'\n    })), state('visible', style({\n      height: '*'\n    })), transition('visible <=> hidden', [animate('{{transitionParams}}')]), transition('void => *', animate(0))])]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Fieldset, [{\n    type: Component,\n    args: [{\n      selector: 'p-fieldset',\n      template: `\n        <fieldset [attr.id]=\"id\" [ngClass]=\"{ 'p-fieldset p-component': true, 'p-fieldset-toggleable': toggleable, 'p-fieldset-expanded': !collapsed && toggleable }\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <legend class=\"p-fieldset-legend\">\n                <ng-container *ngIf=\"toggleable; else legendContent\">\n                    <a tabindex=\"0\" (click)=\"toggle($event)\" (keydown.enter)=\"toggle($event)\" [attr.aria-controls]=\"id + '-content'\" [attr.aria-expanded]=\"!collapsed\" pRipple>\n                        <span class=\"p-fieldset-toggler pi\" *ngIf=\"toggleable\" [ngClass]=\"{ 'pi-minus': !collapsed, 'pi-plus': collapsed }\"></span>\n                        <ng-container *ngTemplateOutlet=\"legendContent\"></ng-container>\n                    </a>\n                </ng-container>\n                <ng-template #legendContent>\n                    <span class=\"p-fieldset-legend-text\">{{ legend }}</span>\n                    <ng-content select=\"p-header\"></ng-content>\n                    <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n                </ng-template>\n            </legend>\n            <div\n                [attr.id]=\"id + '-content'\"\n                class=\"p-toggleable-content\"\n                [@fieldsetContent]=\"collapsed ? { value: 'hidden', params: { transitionParams: transitionOptions, height: '0' } } : { value: 'visible', params: { transitionParams: animating ? transitionOptions : '0ms', height: '*' } }\"\n                [attr.aria-labelledby]=\"id\"\n                [attr.aria-hidden]=\"collapsed\"\n                (@fieldsetContent.done)=\"onToggleDone()\"\n                role=\"region\"\n            >\n                <div class=\"p-fieldset-content\">\n                    <ng-content></ng-content>\n                    <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n                </div>\n            </div>\n        </fieldset>\n    `,\n      animations: [trigger('fieldsetContent', [state('hidden', style({\n        height: '0'\n      })), state('visible', style({\n        height: '*'\n      })), transition('visible <=> hidden', [animate('{{transitionParams}}')]), transition('void => *', animate(0))])],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        class: 'p-element'\n      },\n      styles: [\".p-fieldset-legend>a,.p-fieldset-legend>span{display:flex;align-items:center;justify-content:center}.p-fieldset-toggleable .p-fieldset-legend a{cursor:pointer;-webkit-user-select:none;user-select:none;overflow:hidden;position:relative}.p-fieldset-legend-text{line-height:1}.p-fieldset-toggleable.p-fieldset-expanded>.p-toggleable-content:not(.ng-animating){overflow:visible}.p-fieldset-toggleable .p-toggleable-content{overflow:hidden}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    legend: [{\n      type: Input\n    }],\n    toggleable: [{\n      type: Input\n    }],\n    collapsed: [{\n      type: Input\n    }],\n    collapsedChange: [{\n      type: Output\n    }],\n    onBeforeToggle: [{\n      type: Output\n    }],\n    onAfterToggle: [{\n      type: Output\n    }],\n    style: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    transitionOptions: [{\n      type: Input\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }]\n  });\n})();\nclass FieldsetModule {}\nFieldsetModule.ɵfac = function FieldsetModule_Factory(t) {\n  return new (t || FieldsetModule)();\n};\nFieldsetModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: FieldsetModule\n});\nFieldsetModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule, RippleModule, SharedModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FieldsetModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, RippleModule],\n      exports: [Fieldset, SharedModule],\n      declarations: [Fieldset]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Fieldset, FieldsetModule };\n//# sourceMappingURL=primeng-fieldset.mjs.map","map":{"version":3,"names":["i0","EventEmitter","Component","ChangeDetectionStrategy","ViewEncapsulation","Input","Output","ContentChildren","NgModule","trigger","state","style","transition","animate","i1","CommonModule","PrimeTemplate","SharedModule","i2","RippleModule","idx","Fieldset","constructor","el","collapsed","collapsedChange","onBeforeToggle","onAfterToggle","transitionOptions","id","ngAfterContentInit","templates","forEach","item","getType","headerTemplate","template","contentTemplate","toggle","event","animating","emit","originalEvent","expand","collapse","preventDefault","getBlockableElement","nativeElement","children","onToggleDone","ɵfac","ElementRef","ɵcmp","NgClass","NgIf","NgTemplateOutlet","NgStyle","Ripple","height","type","args","selector","animations","changeDetection","OnPush","encapsulation","None","host","class","styles","legend","toggleable","styleClass","FieldsetModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["/Users/moe/Documents/syp 5.klasse/frontend_ballermetrics/node_modules/primeng/fesm2020/primeng-fieldset.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport * as i2 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\n\nlet idx = 0;\nclass Fieldset {\n    constructor(el) {\n        this.el = el;\n        this.collapsed = false;\n        this.collapsedChange = new EventEmitter();\n        this.onBeforeToggle = new EventEmitter();\n        this.onAfterToggle = new EventEmitter();\n        this.transitionOptions = '400ms cubic-bezier(0.86, 0, 0.07, 1)';\n        this.id = `p-fieldset-${idx++}`;\n    }\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'header':\n                    this.headerTemplate = item.template;\n                    break;\n                case 'content':\n                    this.contentTemplate = item.template;\n                    break;\n            }\n        });\n    }\n    toggle(event) {\n        if (this.animating) {\n            return false;\n        }\n        this.animating = true;\n        this.onBeforeToggle.emit({ originalEvent: event, collapsed: this.collapsed });\n        if (this.collapsed)\n            this.expand(event);\n        else\n            this.collapse(event);\n        this.onAfterToggle.emit({ originalEvent: event, collapsed: this.collapsed });\n        event.preventDefault();\n    }\n    expand(event) {\n        this.collapsed = false;\n        this.collapsedChange.emit(this.collapsed);\n    }\n    collapse(event) {\n        this.collapsed = true;\n        this.collapsedChange.emit(this.collapsed);\n    }\n    getBlockableElement() {\n        return this.el.nativeElement.children[0];\n    }\n    onToggleDone() {\n        this.animating = false;\n    }\n}\nFieldset.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: Fieldset, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nFieldset.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.1.0\", type: Fieldset, selector: \"p-fieldset\", inputs: { legend: \"legend\", toggleable: \"toggleable\", collapsed: \"collapsed\", style: \"style\", styleClass: \"styleClass\", transitionOptions: \"transitionOptions\" }, outputs: { collapsedChange: \"collapsedChange\", onBeforeToggle: \"onBeforeToggle\", onAfterToggle: \"onAfterToggle\" }, host: { classAttribute: \"p-element\" }, queries: [{ propertyName: \"templates\", predicate: PrimeTemplate }], ngImport: i0, template: `\n        <fieldset [attr.id]=\"id\" [ngClass]=\"{ 'p-fieldset p-component': true, 'p-fieldset-toggleable': toggleable, 'p-fieldset-expanded': !collapsed && toggleable }\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <legend class=\"p-fieldset-legend\">\n                <ng-container *ngIf=\"toggleable; else legendContent\">\n                    <a tabindex=\"0\" (click)=\"toggle($event)\" (keydown.enter)=\"toggle($event)\" [attr.aria-controls]=\"id + '-content'\" [attr.aria-expanded]=\"!collapsed\" pRipple>\n                        <span class=\"p-fieldset-toggler pi\" *ngIf=\"toggleable\" [ngClass]=\"{ 'pi-minus': !collapsed, 'pi-plus': collapsed }\"></span>\n                        <ng-container *ngTemplateOutlet=\"legendContent\"></ng-container>\n                    </a>\n                </ng-container>\n                <ng-template #legendContent>\n                    <span class=\"p-fieldset-legend-text\">{{ legend }}</span>\n                    <ng-content select=\"p-header\"></ng-content>\n                    <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n                </ng-template>\n            </legend>\n            <div\n                [attr.id]=\"id + '-content'\"\n                class=\"p-toggleable-content\"\n                [@fieldsetContent]=\"collapsed ? { value: 'hidden', params: { transitionParams: transitionOptions, height: '0' } } : { value: 'visible', params: { transitionParams: animating ? transitionOptions : '0ms', height: '*' } }\"\n                [attr.aria-labelledby]=\"id\"\n                [attr.aria-hidden]=\"collapsed\"\n                (@fieldsetContent.done)=\"onToggleDone()\"\n                role=\"region\"\n            >\n                <div class=\"p-fieldset-content\">\n                    <ng-content></ng-content>\n                    <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n                </div>\n            </div>\n        </fieldset>\n    `, isInline: true, styles: [\".p-fieldset-legend>a,.p-fieldset-legend>span{display:flex;align-items:center;justify-content:center}.p-fieldset-toggleable .p-fieldset-legend a{cursor:pointer;-webkit-user-select:none;user-select:none;overflow:hidden;position:relative}.p-fieldset-legend-text{line-height:1}.p-fieldset-toggleable.p-fieldset-expanded>.p-toggleable-content:not(.ng-animating){overflow:visible}.p-fieldset-toggleable .p-toggleable-content{overflow:hidden}\\n\"], dependencies: [{ kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"directive\", type: i2.Ripple, selector: \"[pRipple]\" }], animations: [\n        trigger('fieldsetContent', [\n            state('hidden', style({\n                height: '0'\n            })),\n            state('visible', style({\n                height: '*'\n            })),\n            transition('visible <=> hidden', [animate('{{transitionParams}}')]),\n            transition('void => *', animate(0))\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: Fieldset, decorators: [{\n            type: Component,\n            args: [{ selector: 'p-fieldset', template: `\n        <fieldset [attr.id]=\"id\" [ngClass]=\"{ 'p-fieldset p-component': true, 'p-fieldset-toggleable': toggleable, 'p-fieldset-expanded': !collapsed && toggleable }\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <legend class=\"p-fieldset-legend\">\n                <ng-container *ngIf=\"toggleable; else legendContent\">\n                    <a tabindex=\"0\" (click)=\"toggle($event)\" (keydown.enter)=\"toggle($event)\" [attr.aria-controls]=\"id + '-content'\" [attr.aria-expanded]=\"!collapsed\" pRipple>\n                        <span class=\"p-fieldset-toggler pi\" *ngIf=\"toggleable\" [ngClass]=\"{ 'pi-minus': !collapsed, 'pi-plus': collapsed }\"></span>\n                        <ng-container *ngTemplateOutlet=\"legendContent\"></ng-container>\n                    </a>\n                </ng-container>\n                <ng-template #legendContent>\n                    <span class=\"p-fieldset-legend-text\">{{ legend }}</span>\n                    <ng-content select=\"p-header\"></ng-content>\n                    <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n                </ng-template>\n            </legend>\n            <div\n                [attr.id]=\"id + '-content'\"\n                class=\"p-toggleable-content\"\n                [@fieldsetContent]=\"collapsed ? { value: 'hidden', params: { transitionParams: transitionOptions, height: '0' } } : { value: 'visible', params: { transitionParams: animating ? transitionOptions : '0ms', height: '*' } }\"\n                [attr.aria-labelledby]=\"id\"\n                [attr.aria-hidden]=\"collapsed\"\n                (@fieldsetContent.done)=\"onToggleDone()\"\n                role=\"region\"\n            >\n                <div class=\"p-fieldset-content\">\n                    <ng-content></ng-content>\n                    <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n                </div>\n            </div>\n        </fieldset>\n    `, animations: [\n                        trigger('fieldsetContent', [\n                            state('hidden', style({\n                                height: '0'\n                            })),\n                            state('visible', style({\n                                height: '*'\n                            })),\n                            transition('visible <=> hidden', [animate('{{transitionParams}}')]),\n                            transition('void => *', animate(0))\n                        ])\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: {\n                        class: 'p-element'\n                    }, styles: [\".p-fieldset-legend>a,.p-fieldset-legend>span{display:flex;align-items:center;justify-content:center}.p-fieldset-toggleable .p-fieldset-legend a{cursor:pointer;-webkit-user-select:none;user-select:none;overflow:hidden;position:relative}.p-fieldset-legend-text{line-height:1}.p-fieldset-toggleable.p-fieldset-expanded>.p-toggleable-content:not(.ng-animating){overflow:visible}.p-fieldset-toggleable .p-toggleable-content{overflow:hidden}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { legend: [{\n                type: Input\n            }], toggleable: [{\n                type: Input\n            }], collapsed: [{\n                type: Input\n            }], collapsedChange: [{\n                type: Output\n            }], onBeforeToggle: [{\n                type: Output\n            }], onAfterToggle: [{\n                type: Output\n            }], style: [{\n                type: Input\n            }], styleClass: [{\n                type: Input\n            }], transitionOptions: [{\n                type: Input\n            }], templates: [{\n                type: ContentChildren,\n                args: [PrimeTemplate]\n            }] } });\nclass FieldsetModule {\n}\nFieldsetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: FieldsetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nFieldsetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.1.0\", ngImport: i0, type: FieldsetModule, declarations: [Fieldset], imports: [CommonModule, RippleModule], exports: [Fieldset, SharedModule] });\nFieldsetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: FieldsetModule, imports: [CommonModule, RippleModule, SharedModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: FieldsetModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, RippleModule],\n                    exports: [Fieldset, SharedModule],\n                    declarations: [Fieldset]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Fieldset, FieldsetModule };\n//# sourceMappingURL=primeng-fieldset.mjs.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}