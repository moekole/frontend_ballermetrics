{"ast":null,"code":"import { trigger, transition, style, animate } from '@angular/animations';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, ViewChild, ContentChildren, Output, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i1 from 'primeng/api';\nimport { TranslationKeys, PrimeTemplate, SharedModule } from 'primeng/api';\nimport * as i7 from 'primeng/autofocus';\nimport { AutoFocusModule } from 'primeng/autofocus';\nimport * as i4 from 'primeng/button';\nimport { ButtonModule } from 'primeng/button';\nimport { DomHandler } from 'primeng/dom';\nimport { InputTextModule } from 'primeng/inputtext';\nimport * as i3 from 'primeng/overlay';\nimport { OverlayModule } from 'primeng/overlay';\nimport * as i5 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nimport * as i6 from 'primeng/scroller';\nimport { ScrollerModule } from 'primeng/scroller';\nimport { UniqueComponentId, ObjectUtils } from 'primeng/utils';\nconst _c0 = [\"container\"];\nconst _c1 = [\"in\"];\nconst _c2 = [\"multiIn\"];\nconst _c3 = [\"multiContainer\"];\nconst _c4 = [\"ddBtn\"];\nconst _c5 = [\"items\"];\nconst _c6 = [\"scroller\"];\nconst _c7 = [\"overlay\"];\nconst _c8 = function (a0, a1) {\n  return {\n    \"p-autocomplete-dd-input\": a0,\n    \"p-disabled\": a1\n  };\n};\nfunction AutoComplete_input_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 13, 14);\n    i0.ɵɵlistener(\"click\", function AutoComplete_input_2_Template_input_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.onInputClick($event));\n    })(\"input\", function AutoComplete_input_2_Template_input_input_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.onInput($event));\n    })(\"keydown\", function AutoComplete_input_2_Template_input_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.onKeydown($event));\n    })(\"keyup\", function AutoComplete_input_2_Template_input_keyup_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.onKeyup($event));\n    })(\"focus\", function AutoComplete_input_2_Template_input_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.onInputFocus($event));\n    })(\"blur\", function AutoComplete_input_2_Template_input_blur_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.onInputBlur($event));\n    })(\"change\", function AutoComplete_input_2_Template_input_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r22.onInputChange($event));\n    })(\"paste\", function AutoComplete_input_2_Template_input_paste_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r23.onInputPaste($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.inputStyleClass);\n    i0.ɵɵproperty(\"autofocus\", ctx_r1.autofocus)(\"ngStyle\", ctx_r1.inputStyle)(\"autocomplete\", ctx_r1.autocomplete)(\"ngClass\", i0.ɵɵpureFunction2(20, _c8, ctx_r1.dropdown, ctx_r1.disabled))(\"value\", ctx_r1.inputFieldValue)(\"readonly\", ctx_r1.readonly)(\"disabled\", ctx_r1.disabled);\n    i0.ɵɵattribute(\"type\", ctx_r1.type)(\"id\", ctx_r1.inputId)(\"required\", ctx_r1.required)(\"name\", ctx_r1.name)(\"placeholder\", ctx_r1.placeholder)(\"size\", ctx_r1.size)(\"maxlength\", ctx_r1.maxlength)(\"tabindex\", ctx_r1.tabindex)(\"aria-label\", ctx_r1.ariaLabel)(\"aria-labelledby\", ctx_r1.ariaLabelledBy)(\"aria-required\", ctx_r1.required);\n  }\n}\nfunction AutoComplete_i_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"i\", 15);\n    i0.ɵɵlistener(\"click\", function AutoComplete_i_3_Template_i_click_0_listener() {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r24.clear());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AutoComplete_i_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"i\", 15);\n    i0.ɵɵlistener(\"click\", function AutoComplete_i_4_Template_i_click_0_listener() {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r26.clear());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AutoComplete_ul_5_li_2_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction AutoComplete_ul_5_li_2_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 27);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const val_r31 = i0.ɵɵnextContext().$implicit;\n    const ctx_r34 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r34.resolveFieldData(val_r31));\n  }\n}\nfunction AutoComplete_ul_5_li_2_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r38 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 28);\n    i0.ɵɵlistener(\"click\", function AutoComplete_ul_5_li_2_span_4_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r38);\n      i0.ɵɵnextContext();\n      const _r32 = i0.ɵɵreference(1);\n      const ctx_r37 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r37.removeItem(_r32));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c9 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\nfunction AutoComplete_ul_5_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 22, 23);\n    i0.ɵɵtemplate(2, AutoComplete_ul_5_li_2_ng_container_2_Template, 1, 0, \"ng-container\", 24);\n    i0.ɵɵtemplate(3, AutoComplete_ul_5_li_2_span_3_Template, 2, 1, \"span\", 25);\n    i0.ɵɵtemplate(4, AutoComplete_ul_5_li_2_span_4_Template, 1, 0, \"span\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const val_r31 = ctx.$implicit;\n    const ctx_r29 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r29.selectedItemTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(4, _c9, val_r31));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r29.selectedItemTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r29.disabled && !ctx_r29.readonly);\n  }\n}\nconst _c10 = function (a0, a1) {\n  return {\n    \"p-disabled\": a0,\n    \"p-focus\": a1\n  };\n};\nfunction AutoComplete_ul_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r40 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ul\", 16, 17);\n    i0.ɵɵlistener(\"click\", function AutoComplete_ul_5_Template_ul_click_0_listener() {\n      i0.ɵɵrestoreView(_r40);\n      const _r30 = i0.ɵɵreference(5);\n      return i0.ɵɵresetView(_r30.focus());\n    });\n    i0.ɵɵtemplate(2, AutoComplete_ul_5_li_2_Template, 5, 6, \"li\", 18);\n    i0.ɵɵelementStart(3, \"li\", 19)(4, \"input\", 20, 21);\n    i0.ɵɵlistener(\"input\", function AutoComplete_ul_5_Template_input_input_4_listener($event) {\n      i0.ɵɵrestoreView(_r40);\n      const ctx_r41 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r41.onInput($event));\n    })(\"click\", function AutoComplete_ul_5_Template_input_click_4_listener($event) {\n      i0.ɵɵrestoreView(_r40);\n      const ctx_r42 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r42.onInputClick($event));\n    })(\"keydown\", function AutoComplete_ul_5_Template_input_keydown_4_listener($event) {\n      i0.ɵɵrestoreView(_r40);\n      const ctx_r43 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r43.onKeydown($event));\n    })(\"keyup\", function AutoComplete_ul_5_Template_input_keyup_4_listener($event) {\n      i0.ɵɵrestoreView(_r40);\n      const ctx_r44 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r44.onKeyup($event));\n    })(\"focus\", function AutoComplete_ul_5_Template_input_focus_4_listener($event) {\n      i0.ɵɵrestoreView(_r40);\n      const ctx_r45 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r45.onInputFocus($event));\n    })(\"blur\", function AutoComplete_ul_5_Template_input_blur_4_listener($event) {\n      i0.ɵɵrestoreView(_r40);\n      const ctx_r46 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r46.onInputBlur($event));\n    })(\"change\", function AutoComplete_ul_5_Template_input_change_4_listener($event) {\n      i0.ɵɵrestoreView(_r40);\n      const ctx_r47 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r47.onInputChange($event));\n    })(\"paste\", function AutoComplete_ul_5_Template_input_paste_4_listener($event) {\n      i0.ɵɵrestoreView(_r40);\n      const ctx_r48 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r48.onInputPaste($event));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(20, _c10, ctx_r4.disabled, ctx_r4.focus));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.value);\n    i0.ɵɵadvance(2);\n    i0.ɵɵclassMap(ctx_r4.inputStyleClass);\n    i0.ɵɵproperty(\"autofocus\", ctx_r4.autofocus)(\"disabled\", ctx_r4.disabled)(\"readonly\", ctx_r4.readonly)(\"autocomplete\", ctx_r4.autocomplete)(\"ngStyle\", ctx_r4.inputStyle);\n    i0.ɵɵattribute(\"type\", ctx_r4.type)(\"id\", ctx_r4.inputId)(\"placeholder\", ctx_r4.value && ctx_r4.value.length ? null : ctx_r4.placeholder)(\"tabindex\", ctx_r4.tabindex)(\"maxlength\", ctx_r4.maxlength)(\"aria-label\", ctx_r4.ariaLabel)(\"aria-labelledby\", ctx_r4.ariaLabelledBy)(\"aria-required\", ctx_r4.required)(\"aria-controls\", ctx_r4.listId)(\"aria-expanded\", ctx_r4.overlayVisible)(\"aria-activedescendant\", \"p-highlighted-option\");\n  }\n}\nfunction AutoComplete_i_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 29);\n  }\n}\nfunction AutoComplete_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r51 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 30, 31);\n    i0.ɵɵlistener(\"click\", function AutoComplete_button_7_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r51);\n      const ctx_r50 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r50.handleDropdownClick($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"icon\", ctx_r6.dropdownIcon)(\"disabled\", ctx_r6.disabled);\n    i0.ɵɵattribute(\"aria-label\", ctx_r6.dropdownAriaLabel)(\"tabindex\", ctx_r6.tabindex);\n  }\n}\nfunction AutoComplete_ng_container_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction AutoComplete_p_scroller_12_ng_template_2_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c11 = function (a0, a1) {\n  return {\n    $implicit: a0,\n    options: a1\n  };\n};\nfunction AutoComplete_p_scroller_12_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, AutoComplete_p_scroller_12_ng_template_2_ng_container_0_Template, 1, 0, \"ng-container\", 24);\n  }\n  if (rf & 2) {\n    const items_r55 = ctx.$implicit;\n    const scrollerOptions_r56 = ctx.options;\n    i0.ɵɵnextContext(2);\n    const _r11 = i0.ɵɵreference(15);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r11)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c11, items_r55, scrollerOptions_r56));\n  }\n}\nfunction AutoComplete_p_scroller_12_ng_container_3_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c12 = function (a0) {\n  return {\n    options: a0\n  };\n};\nfunction AutoComplete_p_scroller_12_ng_container_3_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, AutoComplete_p_scroller_12_ng_container_3_ng_template_1_ng_container_0_Template, 1, 0, \"ng-container\", 24);\n  }\n  if (rf & 2) {\n    const scrollerOptions_r59 = ctx.options;\n    const ctx_r58 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r58.loaderTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c12, scrollerOptions_r59));\n  }\n}\nfunction AutoComplete_p_scroller_12_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, AutoComplete_p_scroller_12_ng_container_3_ng_template_1_Template, 1, 4, \"ng-template\", 35);\n    i0.ɵɵelementContainerEnd();\n  }\n}\nconst _c13 = function (a0) {\n  return {\n    height: a0\n  };\n};\nfunction AutoComplete_p_scroller_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r62 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-scroller\", 32, 33);\n    i0.ɵɵlistener(\"onLazyLoad\", function AutoComplete_p_scroller_12_Template_p_scroller_onLazyLoad_0_listener($event) {\n      i0.ɵɵrestoreView(_r62);\n      const ctx_r61 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r61.onLazyLoad.emit($event));\n    });\n    i0.ɵɵtemplate(2, AutoComplete_p_scroller_12_ng_template_2_Template, 1, 5, \"ng-template\", 34);\n    i0.ɵɵtemplate(3, AutoComplete_p_scroller_12_ng_container_3_Template, 2, 0, \"ng-container\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction1(8, _c13, ctx_r9.scrollHeight));\n    i0.ɵɵproperty(\"items\", ctx_r9.suggestions)(\"itemSize\", ctx_r9.virtualScrollItemSize || ctx_r9._itemSize)(\"autoSize\", true)(\"lazy\", ctx_r9.lazy)(\"options\", ctx_r9.virtualScrollOptions);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r9.loaderTemplate);\n  }\n}\nfunction AutoComplete_ng_container_13_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c14 = function () {\n  return {};\n};\nfunction AutoComplete_ng_container_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, AutoComplete_ng_container_13_ng_container_1_Template, 1, 0, \"ng-container\", 24);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext();\n    const _r11 = i0.ɵɵreference(15);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r11)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(3, _c11, ctx_r10.suggestions, i0.ɵɵpureFunction0(2, _c14)));\n  }\n}\nfunction AutoComplete_ng_template_14_ng_container_2_ng_template_1_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const optgroup_r73 = i0.ɵɵnextContext().$implicit;\n    const ctx_r74 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r74.getOptionGroupLabel(optgroup_r73) || \"empty\");\n  }\n}\nfunction AutoComplete_ng_template_14_ng_container_2_ng_template_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction AutoComplete_ng_template_14_ng_container_2_ng_template_1_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction AutoComplete_ng_template_14_ng_container_2_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 41);\n    i0.ɵɵtemplate(1, AutoComplete_ng_template_14_ng_container_2_ng_template_1_span_1_Template, 2, 1, \"span\", 11);\n    i0.ɵɵtemplate(2, AutoComplete_ng_template_14_ng_container_2_ng_template_1_ng_container_2_Template, 1, 0, \"ng-container\", 24);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, AutoComplete_ng_template_14_ng_container_2_ng_template_1_ng_container_3_Template, 1, 0, \"ng-container\", 24);\n  }\n  if (rf & 2) {\n    const optgroup_r73 = ctx.$implicit;\n    const scrollerOptions_r65 = i0.ɵɵnextContext(2).options;\n    const _r69 = i0.ɵɵreference(5);\n    const ctx_r72 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(6, _c13, scrollerOptions_r65.itemSize + \"px\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r72.groupTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r72.groupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(8, _c9, optgroup_r73));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r69)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(10, _c9, ctx_r72.getOptionGroupChildren(optgroup_r73)));\n  }\n}\nfunction AutoComplete_ng_template_14_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, AutoComplete_ng_template_14_ng_container_2_ng_template_1_Template, 4, 12, \"ng-template\", 40);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const items_r64 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", items_r64);\n  }\n}\nfunction AutoComplete_ng_template_14_ng_container_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction AutoComplete_ng_template_14_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, AutoComplete_ng_template_14_ng_container_3_ng_container_1_Template, 1, 0, \"ng-container\", 24);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const items_r64 = i0.ɵɵnextContext().$implicit;\n    const _r69 = i0.ɵɵreference(5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r69)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c9, items_r64));\n  }\n}\nfunction AutoComplete_ng_template_14_ng_template_4_li_0_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r84 = i0.ɵɵnextContext().$implicit;\n    const ctx_r86 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r86.resolveFieldData(option_r84));\n  }\n}\nfunction AutoComplete_ng_template_14_ng_template_4_li_0_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c15 = function (a0) {\n  return {\n    \"p-highlight\": a0\n  };\n};\nconst _c16 = function (a0, a1) {\n  return {\n    $implicit: a0,\n    index: a1\n  };\n};\nfunction AutoComplete_ng_template_14_ng_template_4_li_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r90 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 43);\n    i0.ɵɵlistener(\"click\", function AutoComplete_ng_template_14_ng_template_4_li_0_Template_li_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r90);\n      const option_r84 = restoredCtx.$implicit;\n      const ctx_r89 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r89.selectItem(option_r84));\n    });\n    i0.ɵɵtemplate(1, AutoComplete_ng_template_14_ng_template_4_li_0_span_1_Template, 2, 1, \"span\", 11);\n    i0.ɵɵtemplate(2, AutoComplete_ng_template_14_ng_template_4_li_0_ng_container_2_Template, 1, 0, \"ng-container\", 24);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r84 = ctx.$implicit;\n    const idx_r85 = ctx.index;\n    const scrollerOptions_r65 = i0.ɵɵnextContext(2).options;\n    const ctx_r83 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(6, _c13, scrollerOptions_r65.itemSize + \"px\"))(\"ngClass\", i0.ɵɵpureFunction1(8, _c15, option_r84 === ctx_r83.highlightOption))(\"id\", ctx_r83.highlightOption == option_r84 ? \"p-highlighted-option\" : \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r83.itemTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r83.itemTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(10, _c16, option_r84, scrollerOptions_r65.getOptions ? scrollerOptions_r65.getOptions(idx_r85) : idx_r85));\n  }\n}\nfunction AutoComplete_ng_template_14_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, AutoComplete_ng_template_14_ng_template_4_li_0_Template, 3, 13, \"li\", 42);\n  }\n  if (rf & 2) {\n    const suggestionsToDisplay_r82 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngForOf\", suggestionsToDisplay_r82);\n  }\n}\nfunction AutoComplete_ng_template_14_li_6_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r92 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r92.emptyMessageLabel, \" \");\n  }\n}\nfunction AutoComplete_ng_template_14_li_6_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, null, 46);\n  }\n}\nfunction AutoComplete_ng_template_14_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 44);\n    i0.ɵɵtemplate(1, AutoComplete_ng_template_14_li_6_ng_container_1_Template, 2, 1, \"ng-container\", 45);\n    i0.ɵɵtemplate(2, AutoComplete_ng_template_14_li_6_ng_container_2_Template, 2, 0, \"ng-container\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const scrollerOptions_r65 = i0.ɵɵnextContext().options;\n    const ctx_r71 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(4, _c13, scrollerOptions_r65.itemSize + \"px\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r71.emptyTemplate)(\"ngIfElse\", ctx_r71.empty);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r71.emptyTemplate);\n  }\n}\nfunction AutoComplete_ng_template_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 36, 37);\n    i0.ɵɵtemplate(2, AutoComplete_ng_template_14_ng_container_2_Template, 2, 1, \"ng-container\", 11);\n    i0.ɵɵtemplate(3, AutoComplete_ng_template_14_ng_container_3_Template, 2, 4, \"ng-container\", 11);\n    i0.ɵɵtemplate(4, AutoComplete_ng_template_14_ng_template_4_Template, 1, 1, \"ng-template\", null, 38, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(6, AutoComplete_ng_template_14_li_6_Template, 3, 6, \"li\", 39);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const scrollerOptions_r65 = ctx.options;\n    const ctx_r12 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(scrollerOptions_r65.contentStyle);\n    i0.ɵɵproperty(\"ngClass\", scrollerOptions_r65.contentStyleClass);\n    i0.ɵɵattribute(\"id\", ctx_r12.listId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r12.group);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r12.group);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r12.noResults && ctx_r12.showEmptyMessage);\n  }\n}\nfunction AutoComplete_ng_container_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c17 = function (a1, a2) {\n  return {\n    \"p-autocomplete p-component\": true,\n    \"p-autocomplete-dd\": a1,\n    \"p-autocomplete-multiple\": a2\n  };\n};\nconst _c18 = function () {\n  return [\"p-autocomplete-panel p-component\"];\n};\nconst AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => AutoComplete),\n  multi: true\n};\nlet AutoComplete = /*#__PURE__*/(() => {\n  class AutoComplete {\n    constructor(el, renderer, cd, differs, config, overlayService, zone) {\n      this.el = el;\n      this.renderer = renderer;\n      this.cd = cd;\n      this.differs = differs;\n      this.config = config;\n      this.overlayService = overlayService;\n      this.zone = zone;\n      this.minLength = 1;\n      this.delay = 300;\n      this.scrollHeight = '200px';\n      this.lazy = false;\n      this.type = 'text';\n      this.autoZIndex = true;\n      this.baseZIndex = 0;\n      this.dropdownIcon = 'pi pi-chevron-down';\n      this.unique = true;\n      this.completeOnFocus = false;\n      this.showClear = false;\n      this.dropdownMode = 'blank';\n      this.showTransitionOptions = '.12s cubic-bezier(0, 0, 0.2, 1)';\n      this.hideTransitionOptions = '.1s linear';\n      this.autocomplete = 'off';\n      this.completeMethod = new EventEmitter();\n      this.onSelect = new EventEmitter();\n      this.onUnselect = new EventEmitter();\n      this.onFocus = new EventEmitter();\n      this.onBlur = new EventEmitter();\n      this.onDropdownClick = new EventEmitter();\n      this.onClear = new EventEmitter();\n      this.onKeyUp = new EventEmitter();\n      this.onShow = new EventEmitter();\n      this.onHide = new EventEmitter();\n      this.onLazyLoad = new EventEmitter();\n      this.onModelChange = () => {};\n      this.onModelTouched = () => {};\n      this.overlayVisible = false;\n      this.focus = false;\n      this.inputFieldValue = null;\n      this.inputValue = null;\n      this.differ = differs.find([]).create(null);\n      this.listId = UniqueComponentId() + '_list';\n    }\n    get itemSize() {\n      return this._itemSize;\n    }\n    set itemSize(val) {\n      this._itemSize = val;\n      console.warn('The itemSize property is deprecated, use virtualScrollItemSize property instead.');\n    }\n    get suggestions() {\n      return this._suggestions;\n    }\n    set suggestions(val) {\n      this._suggestions = val;\n      this.handleSuggestionsChange();\n    }\n    ngAfterViewChecked() {\n      //Use timeouts as since Angular 4.2, AfterViewChecked is broken and not called after panel is updated\n      if (this.suggestionsUpdated && this.overlayViewChild) {\n        this.zone.runOutsideAngular(() => {\n          setTimeout(() => {\n            if (this.overlayViewChild) {\n              this.overlayViewChild.alignOverlay();\n            }\n          }, 1);\n          this.suggestionsUpdated = false;\n        });\n      }\n      if (this.highlightOptionChanged) {\n        this.zone.runOutsideAngular(() => {\n          setTimeout(() => {\n            if (this.overlay && this.itemsWrapper) {\n              let listItem = DomHandler.findSingle(this.overlayViewChild.overlayViewChild.nativeElement, 'li.p-highlight');\n              if (listItem) {\n                DomHandler.scrollInView(this.itemsWrapper, listItem);\n              }\n            }\n          }, 1);\n          this.highlightOptionChanged = false;\n        });\n      }\n    }\n    handleSuggestionsChange() {\n      if (this._suggestions != null && this.loading) {\n        this.highlightOption = null;\n        if (this._suggestions.length) {\n          this.noResults = false;\n          this.show();\n          this.suggestionsUpdated = true;\n          if (this.autoHighlight) {\n            this.highlightOption = this._suggestions[0];\n          }\n        } else {\n          this.noResults = true;\n          if (this.showEmptyMessage) {\n            this.show();\n            this.suggestionsUpdated = true;\n          } else {\n            this.hide();\n          }\n        }\n        this.loading = false;\n      }\n    }\n    ngAfterContentInit() {\n      this.templates.forEach(item => {\n        switch (item.getType()) {\n          case 'item':\n            this.itemTemplate = item.template;\n            break;\n          case 'group':\n            this.groupTemplate = item.template;\n            break;\n          case 'selectedItem':\n            this.selectedItemTemplate = item.template;\n            break;\n          case 'header':\n            this.headerTemplate = item.template;\n            break;\n          case 'empty':\n            this.emptyTemplate = item.template;\n            break;\n          case 'footer':\n            this.footerTemplate = item.template;\n            break;\n          case 'loader':\n            this.loaderTemplate = item.template;\n            break;\n          default:\n            this.itemTemplate = item.template;\n            break;\n        }\n      });\n    }\n    writeValue(value) {\n      this.value = value;\n      this.filled = this.value && this.value != '';\n      this.updateInputField();\n      this.cd.markForCheck();\n    }\n    getOptionGroupChildren(optionGroup) {\n      return this.optionGroupChildren ? ObjectUtils.resolveFieldData(optionGroup, this.optionGroupChildren) : optionGroup.items;\n    }\n    getOptionGroupLabel(optionGroup) {\n      return this.optionGroupLabel ? ObjectUtils.resolveFieldData(optionGroup, this.optionGroupLabel) : optionGroup.label != undefined ? optionGroup.label : optionGroup;\n    }\n    registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n    setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n    onInput(event) {\n      // When an input element with a placeholder is clicked, the onInput event is invoked in IE.\n      if (!this.inputKeyDown && DomHandler.isIE()) {\n        return;\n      }\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n      let value = event.target.value;\n      this.inputValue = value;\n      if (!this.multiple && !this.forceSelection) {\n        this.onModelChange(value);\n      }\n      if (value.length === 0 && !this.multiple) {\n        this.value = null;\n        this.hide();\n        this.onClear.emit(event);\n        this.onModelChange(value);\n      }\n      if (value.length >= this.minLength) {\n        this.timeout = setTimeout(() => {\n          this.search(event, value);\n        }, this.delay);\n      } else {\n        this.hide();\n      }\n      this.updateFilledState();\n      this.inputKeyDown = false;\n    }\n    onInputClick(event) {\n      if (this.documentClickListener) {\n        this.inputClick = true;\n      }\n    }\n    search(event, query) {\n      //allow empty string but not undefined or null\n      if (query === undefined || query === null) {\n        return;\n      }\n      this.loading = true;\n      this.completeMethod.emit({\n        originalEvent: event,\n        query: query\n      });\n    }\n    selectItem(option, focus = true) {\n      if (this.forceSelectionUpdateModelTimeout) {\n        clearTimeout(this.forceSelectionUpdateModelTimeout);\n        this.forceSelectionUpdateModelTimeout = null;\n      }\n      if (this.multiple) {\n        this.multiInputEL.nativeElement.value = '';\n        this.value = this.value || [];\n        if (!this.isSelected(option) || !this.unique) {\n          this.value = [...this.value, option];\n          this.onModelChange(this.value);\n        }\n      } else {\n        this.inputEL.nativeElement.value = this.resolveFieldData(option);\n        this.value = option;\n        this.onModelChange(this.value);\n      }\n      this.onSelect.emit(option);\n      this.updateFilledState();\n      if (focus) {\n        this.itemClicked = true;\n        this.focusInput();\n      }\n      this.hide();\n    }\n    show(event) {\n      if (this.multiInputEL || this.inputEL) {\n        let hasFocus = this.multiple ? this.multiInputEL.nativeElement.ownerDocument.activeElement == this.multiInputEL.nativeElement : this.inputEL.nativeElement.ownerDocument.activeElement == this.inputEL.nativeElement;\n        if (!this.overlayVisible && hasFocus) {\n          this.overlayVisible = true;\n        }\n      }\n      this.onShow.emit(event);\n      this.cd.markForCheck();\n    }\n    clear() {\n      if (this.multiple) {\n        this.value = null;\n      } else {\n        this.inputValue = null;\n        this.inputEL.nativeElement.value = '';\n      }\n      this.updateFilledState();\n      this.onModelChange(this.value);\n      this.onClear.emit();\n    }\n    onOverlayAnimationStart(event) {\n      if (event.toState === 'visible') {\n        this.itemsWrapper = DomHandler.findSingle(this.overlayViewChild.overlayViewChild.nativeElement, this.virtualScroll ? '.p-scroller' : '.p-autocomplete-panel');\n        this.virtualScroll && this.scroller?.setContentEl(this.itemsViewChild.nativeElement);\n      }\n    }\n    resolveFieldData(value) {\n      let data = this.field ? ObjectUtils.resolveFieldData(value, this.field) : value;\n      return data !== (null || undefined) ? data : '';\n    }\n    hide(event) {\n      this.overlayVisible = false;\n      this.onHide.emit(event);\n      this.cd.markForCheck();\n    }\n    handleDropdownClick(event) {\n      if (!this.overlayVisible) {\n        this.focusInput();\n        let queryValue = this.multiple ? this.multiInputEL.nativeElement.value : this.inputEL.nativeElement.value;\n        if (this.dropdownMode === 'blank') this.search(event, '');else if (this.dropdownMode === 'current') this.search(event, queryValue);\n        this.onDropdownClick.emit({\n          originalEvent: event,\n          query: queryValue\n        });\n      } else {\n        this.hide();\n      }\n    }\n    focusInput() {\n      if (this.multiple) this.multiInputEL.nativeElement.focus();else this.inputEL.nativeElement.focus();\n    }\n    get emptyMessageLabel() {\n      return this.emptyMessage || this.config.getTranslation(TranslationKeys.EMPTY_MESSAGE);\n    }\n    removeItem(item) {\n      let itemIndex = DomHandler.index(item);\n      let removedValue = this.value[itemIndex];\n      this.value = this.value.filter((val, i) => i != itemIndex);\n      this.onModelChange(this.value);\n      this.updateFilledState();\n      this.onUnselect.emit(removedValue);\n    }\n    onKeydown(event) {\n      if (this.overlayVisible) {\n        switch (event.which) {\n          //down\n          case 40:\n            if (this.group) {\n              let highlightItemIndex = this.findOptionGroupIndex(this.highlightOption, this.suggestions);\n              if (highlightItemIndex !== -1) {\n                let nextItemIndex = highlightItemIndex.itemIndex + 1;\n                if (nextItemIndex < this.getOptionGroupChildren(this.suggestions[highlightItemIndex.groupIndex]).length) {\n                  this.highlightOption = this.getOptionGroupChildren(this.suggestions[highlightItemIndex.groupIndex])[nextItemIndex];\n                  this.highlightOptionChanged = true;\n                } else if (this.suggestions[highlightItemIndex.groupIndex + 1]) {\n                  this.highlightOption = this.getOptionGroupChildren(this.suggestions[highlightItemIndex.groupIndex + 1])[0];\n                  this.highlightOptionChanged = true;\n                }\n              } else {\n                this.highlightOption = this.getOptionGroupChildren(this.suggestions[0])[0];\n              }\n            } else {\n              let highlightItemIndex = this.findOptionIndex(this.highlightOption, this.suggestions);\n              if (highlightItemIndex != -1) {\n                var nextItemIndex = highlightItemIndex + 1;\n                if (nextItemIndex != this.suggestions.length) {\n                  this.highlightOption = this.suggestions[nextItemIndex];\n                  this.highlightOptionChanged = true;\n                }\n              } else {\n                this.highlightOption = this.suggestions[0];\n              }\n            }\n            event.preventDefault();\n            break;\n          //up\n          case 38:\n            if (this.group) {\n              let highlightItemIndex = this.findOptionGroupIndex(this.highlightOption, this.suggestions);\n              if (highlightItemIndex !== -1) {\n                let prevItemIndex = highlightItemIndex.itemIndex - 1;\n                if (prevItemIndex >= 0) {\n                  this.highlightOption = this.getOptionGroupChildren(this.suggestions[highlightItemIndex.groupIndex])[prevItemIndex];\n                  this.highlightOptionChanged = true;\n                } else if (prevItemIndex < 0) {\n                  let prevGroup = this.suggestions[highlightItemIndex.groupIndex - 1];\n                  if (prevGroup) {\n                    this.highlightOption = this.getOptionGroupChildren(prevGroup)[this.getOptionGroupChildren(prevGroup).length - 1];\n                    this.highlightOptionChanged = true;\n                  }\n                }\n              }\n            } else {\n              let highlightItemIndex = this.findOptionIndex(this.highlightOption, this.suggestions);\n              if (highlightItemIndex > 0) {\n                let prevItemIndex = highlightItemIndex - 1;\n                this.highlightOption = this.suggestions[prevItemIndex];\n                this.highlightOptionChanged = true;\n              }\n            }\n            event.preventDefault();\n            break;\n          //enter\n          case 13:\n            if (this.highlightOption) {\n              this.selectItem(this.highlightOption);\n              this.hide();\n            }\n            event.preventDefault();\n            break;\n          //escape\n          case 27:\n            this.hide();\n            event.preventDefault();\n            break;\n          //tab\n          case 9:\n            if (this.highlightOption) {\n              this.selectItem(this.highlightOption);\n            }\n            this.hide();\n            break;\n        }\n      } else {\n        if (event.which === 40 && this.suggestions) {\n          this.search(event, event.target.value);\n        } else if (event.ctrlKey && event.key === 'z' && !this.multiple) {\n          this.inputEL.nativeElement.value = this.resolveFieldData(null);\n          this.value = '';\n          this.onModelChange(this.value);\n        } else if (event.ctrlKey && event.key === 'z' && this.multiple) {\n          this.value.pop();\n          this.onModelChange(this.value);\n          this.updateFilledState();\n        }\n      }\n      if (this.multiple) {\n        switch (event.which) {\n          //backspace\n          case 8:\n            if (this.value && this.value.length && !this.multiInputEL.nativeElement.value) {\n              this.value = [...this.value];\n              const removedValue = this.value.pop();\n              this.onModelChange(this.value);\n              this.updateFilledState();\n              this.onUnselect.emit(removedValue);\n            }\n            break;\n        }\n      }\n      this.inputKeyDown = true;\n    }\n    onKeyup(event) {\n      this.onKeyUp.emit(event);\n    }\n    onInputFocus(event) {\n      if (!this.itemClicked && this.completeOnFocus) {\n        let queryValue = this.multiple ? this.multiInputEL.nativeElement.value : this.inputEL.nativeElement.value;\n        this.search(event, queryValue);\n      }\n      this.focus = true;\n      this.onFocus.emit(event);\n      this.itemClicked = false;\n    }\n    onInputBlur(event) {\n      this.focus = false;\n      this.onModelTouched();\n      this.onBlur.emit(event);\n    }\n    onInputChange(event) {\n      if (this.forceSelection) {\n        let valid = false;\n        let inputValue = event.target.value.trim();\n        if (this.suggestions) {\n          for (let suggestion of this.suggestions) {\n            let itemValue = this.field ? ObjectUtils.resolveFieldData(suggestion, this.field) : suggestion;\n            if (itemValue && inputValue === itemValue.trim()) {\n              valid = true;\n              this.forceSelectionUpdateModelTimeout = setTimeout(() => {\n                this.selectItem(suggestion, false);\n              }, 250);\n              break;\n            }\n          }\n        }\n        if (!valid) {\n          if (this.multiple) {\n            this.multiInputEL.nativeElement.value = '';\n          } else {\n            this.value = null;\n            this.inputEL.nativeElement.value = '';\n          }\n          this.onClear.emit(event);\n          this.onModelChange(this.value);\n          this.updateFilledState();\n        }\n      }\n    }\n    onInputPaste(event) {\n      this.onKeydown(event);\n    }\n    isSelected(val) {\n      let selected = false;\n      if (this.value && this.value.length) {\n        for (let i = 0; i < this.value.length; i++) {\n          if (ObjectUtils.equals(this.value[i], val, this.dataKey)) {\n            selected = true;\n            break;\n          }\n        }\n      }\n      return selected;\n    }\n    findOptionIndex(option, suggestions) {\n      let index = -1;\n      if (suggestions) {\n        for (let i = 0; i < suggestions.length; i++) {\n          if (ObjectUtils.equals(option, suggestions[i])) {\n            index = i;\n            break;\n          }\n        }\n      }\n      return index;\n    }\n    findOptionGroupIndex(val, opts) {\n      let groupIndex, itemIndex;\n      if (opts) {\n        for (let i = 0; i < opts.length; i++) {\n          groupIndex = i;\n          itemIndex = this.findOptionIndex(val, this.getOptionGroupChildren(opts[i]));\n          if (itemIndex !== -1) {\n            break;\n          }\n        }\n      }\n      if (itemIndex !== -1) {\n        return {\n          groupIndex: groupIndex,\n          itemIndex: itemIndex\n        };\n      } else {\n        return -1;\n      }\n    }\n    updateFilledState() {\n      if (this.multiple) this.filled = this.value && this.value.length || this.multiInputEL && this.multiInputEL.nativeElement && this.multiInputEL.nativeElement.value != '';else this.filled = this.inputFieldValue && this.inputFieldValue != '' || this.inputEL && this.inputEL.nativeElement && this.inputEL.nativeElement.value != '';\n    }\n    updateInputField() {\n      let formattedValue = this.resolveFieldData(this.value);\n      this.inputFieldValue = formattedValue;\n      if (this.inputEL && this.inputEL.nativeElement) {\n        this.inputEL.nativeElement.value = formattedValue;\n      }\n      this.updateFilledState();\n    }\n    ngOnDestroy() {\n      if (this.forceSelectionUpdateModelTimeout) {\n        clearTimeout(this.forceSelectionUpdateModelTimeout);\n        this.forceSelectionUpdateModelTimeout = null;\n      }\n      if (this.scrollHandler) {\n        this.scrollHandler.destroy();\n        this.scrollHandler = null;\n      }\n    }\n  }\n  AutoComplete.ɵfac = function AutoComplete_Factory(t) {\n    return new (t || AutoComplete)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i1.PrimeNGConfig), i0.ɵɵdirectiveInject(i1.OverlayService), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  AutoComplete.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: AutoComplete,\n    selectors: [[\"p-autoComplete\"]],\n    contentQueries: function AutoComplete_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    viewQuery: function AutoComplete_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n        i0.ɵɵviewQuery(_c3, 5);\n        i0.ɵɵviewQuery(_c4, 5);\n        i0.ɵɵviewQuery(_c5, 5);\n        i0.ɵɵviewQuery(_c6, 5);\n        i0.ɵɵviewQuery(_c7, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerEL = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEL = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.multiInputEL = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.multiContainerEL = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropdownButton = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.itemsViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scroller = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.overlayViewChild = _t.first);\n      }\n    },\n    hostAttrs: [1, \"p-element\", \"p-inputwrapper\"],\n    hostVars: 6,\n    hostBindings: function AutoComplete_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"p-inputwrapper-filled\", ctx.filled)(\"p-inputwrapper-focus\", ctx.focus && !ctx.disabled || ctx.autofocus || ctx.overlayVisible)(\"p-autocomplete-clearable\", ctx.showClear && !ctx.disabled);\n      }\n    },\n    inputs: {\n      minLength: \"minLength\",\n      delay: \"delay\",\n      style: \"style\",\n      panelStyle: \"panelStyle\",\n      styleClass: \"styleClass\",\n      panelStyleClass: \"panelStyleClass\",\n      inputStyle: \"inputStyle\",\n      inputId: \"inputId\",\n      inputStyleClass: \"inputStyleClass\",\n      placeholder: \"placeholder\",\n      readonly: \"readonly\",\n      disabled: \"disabled\",\n      scrollHeight: \"scrollHeight\",\n      lazy: \"lazy\",\n      virtualScroll: \"virtualScroll\",\n      virtualScrollItemSize: \"virtualScrollItemSize\",\n      virtualScrollOptions: \"virtualScrollOptions\",\n      maxlength: \"maxlength\",\n      name: \"name\",\n      required: \"required\",\n      size: \"size\",\n      appendTo: \"appendTo\",\n      autoHighlight: \"autoHighlight\",\n      forceSelection: \"forceSelection\",\n      type: \"type\",\n      autoZIndex: \"autoZIndex\",\n      baseZIndex: \"baseZIndex\",\n      ariaLabel: \"ariaLabel\",\n      dropdownAriaLabel: \"dropdownAriaLabel\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      dropdownIcon: \"dropdownIcon\",\n      unique: \"unique\",\n      group: \"group\",\n      completeOnFocus: \"completeOnFocus\",\n      showClear: \"showClear\",\n      field: \"field\",\n      dropdown: \"dropdown\",\n      showEmptyMessage: \"showEmptyMessage\",\n      dropdownMode: \"dropdownMode\",\n      multiple: \"multiple\",\n      tabindex: \"tabindex\",\n      dataKey: \"dataKey\",\n      emptyMessage: \"emptyMessage\",\n      showTransitionOptions: \"showTransitionOptions\",\n      hideTransitionOptions: \"hideTransitionOptions\",\n      autofocus: \"autofocus\",\n      autocomplete: \"autocomplete\",\n      optionGroupChildren: \"optionGroupChildren\",\n      optionGroupLabel: \"optionGroupLabel\",\n      overlayOptions: \"overlayOptions\",\n      itemSize: \"itemSize\",\n      suggestions: \"suggestions\"\n    },\n    outputs: {\n      completeMethod: \"completeMethod\",\n      onSelect: \"onSelect\",\n      onUnselect: \"onUnselect\",\n      onFocus: \"onFocus\",\n      onBlur: \"onBlur\",\n      onDropdownClick: \"onDropdownClick\",\n      onClear: \"onClear\",\n      onKeyUp: \"onKeyUp\",\n      onShow: \"onShow\",\n      onHide: \"onHide\",\n      onLazyLoad: \"onLazyLoad\"\n    },\n    features: [i0.ɵɵProvidersFeature([AUTOCOMPLETE_VALUE_ACCESSOR])],\n    decls: 17,\n    vars: 30,\n    consts: [[3, \"ngClass\", \"ngStyle\"], [\"container\", \"\"], [\"pAutoFocus\", \"\", \"class\", \"p-autocomplete-input p-inputtext p-component\", \"aria-autocomplete\", \"list\", \"role\", \"searchbox\", 3, \"autofocus\", \"ngStyle\", \"class\", \"autocomplete\", \"ngClass\", \"value\", \"readonly\", \"disabled\", \"click\", \"input\", \"keydown\", \"keyup\", \"focus\", \"blur\", \"change\", \"paste\", 4, \"ngIf\"], [\"class\", \"p-autocomplete-clear-icon pi pi-times\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"p-autocomplete-multiple-container p-component p-inputtext\", 3, \"ngClass\", \"click\", 4, \"ngIf\"], [\"class\", \"p-autocomplete-loader pi pi-spinner pi-spin\", 4, \"ngIf\"], [\"type\", \"button\", \"pButton\", \"\", \"class\", \"p-autocomplete-dropdown\", \"pRipple\", \"\", 3, \"icon\", \"disabled\", \"click\", 4, \"ngIf\"], [3, \"visible\", \"options\", \"target\", \"appendTo\", \"showTransitionOptions\", \"hideTransitionOptions\", \"visibleChange\", \"onAnimationStart\", \"onShow\", \"onHide\"], [\"overlay\", \"\"], [4, \"ngTemplateOutlet\"], [3, \"items\", \"style\", \"itemSize\", \"autoSize\", \"lazy\", \"options\", \"onLazyLoad\", 4, \"ngIf\"], [4, \"ngIf\"], [\"buildInItems\", \"\"], [\"pAutoFocus\", \"\", \"aria-autocomplete\", \"list\", \"role\", \"searchbox\", 1, \"p-autocomplete-input\", \"p-inputtext\", \"p-component\", 3, \"autofocus\", \"ngStyle\", \"autocomplete\", \"ngClass\", \"value\", \"readonly\", \"disabled\", \"click\", \"input\", \"keydown\", \"keyup\", \"focus\", \"blur\", \"change\", \"paste\"], [\"in\", \"\"], [1, \"p-autocomplete-clear-icon\", \"pi\", \"pi-times\", 3, \"click\"], [1, \"p-autocomplete-multiple-container\", \"p-component\", \"p-inputtext\", 3, \"ngClass\", \"click\"], [\"multiContainer\", \"\"], [\"class\", \"p-autocomplete-token\", 4, \"ngFor\", \"ngForOf\"], [1, \"p-autocomplete-input-token\"], [\"pAutoFocus\", \"\", \"aria-autocomplete\", \"list\", \"role\", \"searchbox\", \"aria-haspopup\", \"true\", 3, \"autofocus\", \"disabled\", \"readonly\", \"autocomplete\", \"ngStyle\", \"input\", \"click\", \"keydown\", \"keyup\", \"focus\", \"blur\", \"change\", \"paste\"], [\"multiIn\", \"\"], [1, \"p-autocomplete-token\"], [\"token\", \"\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"class\", \"p-autocomplete-token-label\", 4, \"ngIf\"], [\"class\", \"p-autocomplete-token-icon pi pi-times-circle\", 3, \"click\", 4, \"ngIf\"], [1, \"p-autocomplete-token-label\"], [1, \"p-autocomplete-token-icon\", \"pi\", \"pi-times-circle\", 3, \"click\"], [1, \"p-autocomplete-loader\", \"pi\", \"pi-spinner\", \"pi-spin\"], [\"type\", \"button\", \"pButton\", \"\", \"pRipple\", \"\", 1, \"p-autocomplete-dropdown\", 3, \"icon\", \"disabled\", \"click\"], [\"ddBtn\", \"\"], [3, \"items\", \"itemSize\", \"autoSize\", \"lazy\", \"options\", \"onLazyLoad\"], [\"scroller\", \"\"], [\"pTemplate\", \"content\"], [\"pTemplate\", \"loader\"], [\"role\", \"listbox\", 1, \"p-autocomplete-items\", 3, \"ngClass\"], [\"items\", \"\"], [\"itemslist\", \"\"], [\"class\", \"p-autocomplete-empty-message\", 3, \"ngStyle\", 4, \"ngIf\"], [\"ngFor\", \"\", 3, \"ngForOf\"], [1, \"p-autocomplete-item-group\", 3, \"ngStyle\"], [\"role\", \"option\", \"class\", \"p-autocomplete-item\", \"pRipple\", \"\", 3, \"ngStyle\", \"ngClass\", \"id\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"option\", \"pRipple\", \"\", 1, \"p-autocomplete-item\", 3, \"ngStyle\", \"ngClass\", \"id\", \"click\"], [1, \"p-autocomplete-empty-message\", 3, \"ngStyle\"], [4, \"ngIf\", \"ngIfElse\"], [\"empty\", \"\"]],\n    template: function AutoComplete_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"span\", 0, 1);\n        i0.ɵɵtemplate(2, AutoComplete_input_2_Template, 2, 23, \"input\", 2);\n        i0.ɵɵtemplate(3, AutoComplete_i_3_Template, 1, 0, \"i\", 3);\n        i0.ɵɵtemplate(4, AutoComplete_i_4_Template, 1, 0, \"i\", 3);\n        i0.ɵɵtemplate(5, AutoComplete_ul_5_Template, 6, 23, \"ul\", 4);\n        i0.ɵɵtemplate(6, AutoComplete_i_6_Template, 1, 0, \"i\", 5);\n        i0.ɵɵtemplate(7, AutoComplete_button_7_Template, 2, 4, \"button\", 6);\n        i0.ɵɵelementStart(8, \"p-overlay\", 7, 8);\n        i0.ɵɵlistener(\"visibleChange\", function AutoComplete_Template_p_overlay_visibleChange_8_listener($event) {\n          return ctx.overlayVisible = $event;\n        })(\"onAnimationStart\", function AutoComplete_Template_p_overlay_onAnimationStart_8_listener($event) {\n          return ctx.onOverlayAnimationStart($event);\n        })(\"onShow\", function AutoComplete_Template_p_overlay_onShow_8_listener($event) {\n          return ctx.show($event);\n        })(\"onHide\", function AutoComplete_Template_p_overlay_onHide_8_listener($event) {\n          return ctx.hide($event);\n        });\n        i0.ɵɵelementStart(10, \"div\", 0);\n        i0.ɵɵtemplate(11, AutoComplete_ng_container_11_Template, 1, 0, \"ng-container\", 9);\n        i0.ɵɵtemplate(12, AutoComplete_p_scroller_12_Template, 4, 10, \"p-scroller\", 10);\n        i0.ɵɵtemplate(13, AutoComplete_ng_container_13_Template, 2, 6, \"ng-container\", 11);\n        i0.ɵɵtemplate(14, AutoComplete_ng_template_14_Template, 7, 7, \"ng-template\", null, 12, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(16, AutoComplete_ng_container_16_Template, 1, 0, \"ng-container\", 9);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(26, _c17, ctx.dropdown, ctx.multiple))(\"ngStyle\", ctx.style);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.multiple);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.multiple && ctx.filled && !ctx.disabled && ctx.showClear);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.multiple && ctx.filled && !ctx.disabled && ctx.showClear);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.multiple);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.dropdown);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"visible\", ctx.overlayVisible)(\"options\", ctx.virtualScrollOptions)(\"target\", \"@parent\")(\"appendTo\", ctx.appendTo)(\"showTransitionOptions\", ctx.showTransitionOptions)(\"hideTransitionOptions\", ctx.hideTransitionOptions);\n        i0.ɵɵadvance(2);\n        i0.ɵɵclassMap(ctx.panelStyleClass);\n        i0.ɵɵstyleProp(\"max-height\", ctx.virtualScroll ? \"auto\" : ctx.scrollHeight);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction0(29, _c18))(\"ngStyle\", ctx.panelStyle);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.headerTemplate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.virtualScroll);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.virtualScroll);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.footerTemplate);\n      }\n    },\n    dependencies: [i2.NgClass, i2.NgForOf, i2.NgIf, i2.NgTemplateOutlet, i2.NgStyle, i3.Overlay, i1.PrimeTemplate, i4.ButtonDirective, i5.Ripple, i6.Scroller, i7.AutoFocus],\n    styles: [\".p-autocomplete{display:inline-flex;position:relative}.p-autocomplete-loader{position:absolute;top:50%;margin-top:-.5rem}.p-autocomplete-dd .p-autocomplete-input{flex:1 1 auto;width:1%}.p-autocomplete-dd .p-autocomplete-input,.p-autocomplete-dd .p-autocomplete-multiple-container{border-top-right-radius:0;border-bottom-right-radius:0}.p-autocomplete-dd .p-autocomplete-dropdown{border-top-left-radius:0;border-bottom-left-radius:0}.p-autocomplete-panel{overflow:auto}.p-autocomplete-items{margin:0;padding:0;list-style-type:none}.p-autocomplete-item{cursor:pointer;white-space:nowrap;position:relative;overflow:hidden}.p-autocomplete-multiple-container{margin:0;padding:0;list-style-type:none;cursor:text;overflow:hidden;display:flex;align-items:center;flex-wrap:wrap}.p-autocomplete-token{cursor:default;display:inline-flex;align-items:center;flex:0 0 auto}.p-autocomplete-token-icon{cursor:pointer}.p-autocomplete-input-token{flex:1 1 auto;display:inline-flex}.p-autocomplete-input-token input{border:0 none;outline:0 none;background-color:transparent;margin:0;padding:0;box-shadow:none;border-radius:0;width:100%}.p-fluid .p-autocomplete{display:flex}.p-fluid .p-autocomplete-dd .p-autocomplete-input{width:1%}.p-autocomplete-clear-icon{position:absolute;top:50%;margin-top:-.5rem;cursor:pointer}.p-autocomplete-clearable{position:relative}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('overlayAnimation', [transition(':enter', [style({\n        opacity: 0,\n        transform: 'scaleY(0.8)'\n      }), animate('{{showTransitionParams}}')]), transition(':leave', [animate('{{hideTransitionParams}}', style({\n        opacity: 0\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return AutoComplete;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet AutoCompleteModule = /*#__PURE__*/(() => {\n  class AutoCompleteModule {}\n  AutoCompleteModule.ɵfac = function AutoCompleteModule_Factory(t) {\n    return new (t || AutoCompleteModule)();\n  };\n  AutoCompleteModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AutoCompleteModule\n  });\n  AutoCompleteModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, OverlayModule, InputTextModule, ButtonModule, SharedModule, RippleModule, ScrollerModule, AutoFocusModule, OverlayModule, SharedModule, ScrollerModule, AutoFocusModule]\n  });\n  return AutoCompleteModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTOCOMPLETE_VALUE_ACCESSOR, AutoComplete, AutoCompleteModule };\n//# sourceMappingURL=primeng-autocomplete.mjs.map\n//# sourceMappingURL=primeng-autocomplete.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}