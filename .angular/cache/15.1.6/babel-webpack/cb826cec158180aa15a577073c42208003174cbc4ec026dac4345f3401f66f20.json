{"ast":null,"code":"import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { InputTextModule } from 'primeng/inputtext';\nconst _c0 = [\"inputtext\"];\nfunction Chips_li_2_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Chips_li_2_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r7.field ? ctx_r7.resolveFieldData(item_r3, ctx_r7.field) : item_r3);\n  }\n}\nfunction Chips_li_2_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 13);\n    i0.ɵɵlistener(\"click\", function Chips_li_2_span_4_Template_span_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const i_r4 = i0.ɵɵnextContext().index;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.removeItem($event, i_r4));\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\nfunction Chips_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 7, 8);\n    i0.ɵɵlistener(\"click\", function Chips_li_2_Template_li_click_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const item_r3 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.onItemClick($event, item_r3));\n    });\n    i0.ɵɵtemplate(2, Chips_li_2_ng_container_2_Template, 1, 0, \"ng-container\", 9);\n    i0.ɵɵtemplate(3, Chips_li_2_span_3_Template, 2, 1, \"span\", 10);\n    i0.ɵɵtemplate(4, Chips_li_2_span_4_Template, 1, 0, \"span\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.itemTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(4, _c1, item_r3));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.itemTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.disabled);\n  }\n}\nfunction Chips_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\")(1, \"i\", 14);\n    i0.ɵɵlistener(\"click\", function Chips_li_6_Template_i_click_1_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.clear());\n    });\n    i0.ɵɵelementEnd()();\n  }\n}\nconst _c2 = function (a1, a2) {\n  return {\n    \"p-inputtext p-chips-multiple-container\": true,\n    \"p-focus\": a1,\n    \"p-disabled\": a2\n  };\n};\nconst _c3 = function (a0) {\n  return {\n    \"p-chips-clearable\": a0\n  };\n};\nconst CHIPS_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Chips),\n  multi: true\n};\nlet Chips = /*#__PURE__*/(() => {\n  class Chips {\n    constructor(el, cd) {\n      this.el = el;\n      this.cd = cd;\n      this.allowDuplicate = true;\n      this.showClear = false;\n      this.onAdd = new EventEmitter();\n      this.onRemove = new EventEmitter();\n      this.onFocus = new EventEmitter();\n      this.onBlur = new EventEmitter();\n      this.onChipClick = new EventEmitter();\n      this.onClear = new EventEmitter();\n      this.onModelChange = () => {};\n      this.onModelTouched = () => {};\n    }\n    ngAfterContentInit() {\n      this.templates.forEach(item => {\n        switch (item.getType()) {\n          case 'item':\n            this.itemTemplate = item.template;\n            break;\n          default:\n            this.itemTemplate = item.template;\n            break;\n        }\n      });\n      this.updateFilledState();\n    }\n    onClick() {\n      this.inputViewChild.nativeElement.focus();\n    }\n    onInput() {\n      this.updateFilledState();\n    }\n    onPaste(event) {\n      if (!this.disabled) {\n        if (this.separator) {\n          let pastedData = (event.clipboardData || window['clipboardData']).getData('Text');\n          pastedData.split(this.separator).forEach(val => {\n            this.addItem(event, val, true);\n          });\n          this.inputViewChild.nativeElement.value = '';\n        }\n        this.updateFilledState();\n      }\n    }\n    updateFilledState() {\n      if (!this.value || this.value.length === 0) {\n        this.filled = this.inputViewChild && this.inputViewChild.nativeElement && this.inputViewChild.nativeElement.value != '';\n      } else {\n        this.filled = true;\n      }\n    }\n    onItemClick(event, item) {\n      this.onChipClick.emit({\n        originalEvent: event,\n        value: item\n      });\n    }\n    writeValue(value) {\n      this.value = value;\n      this.updateMaxedOut();\n      this.updateFilledState();\n      this.cd.markForCheck();\n    }\n    registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n    setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n    resolveFieldData(data, field) {\n      if (data && field) {\n        if (field.indexOf('.') == -1) {\n          return data[field];\n        } else {\n          let fields = field.split('.');\n          let value = data;\n          for (var i = 0, len = fields.length; i < len; ++i) {\n            value = value[fields[i]];\n          }\n          return value;\n        }\n      } else {\n        return null;\n      }\n    }\n    onInputFocus(event) {\n      this.focus = true;\n      this.onFocus.emit(event);\n    }\n    onInputBlur(event) {\n      this.focus = false;\n      if (this.addOnBlur && this.inputViewChild.nativeElement.value) {\n        this.addItem(event, this.inputViewChild.nativeElement.value, false);\n      }\n      this.onModelTouched();\n      this.onBlur.emit(event);\n    }\n    removeItem(event, index) {\n      if (this.disabled) {\n        return;\n      }\n      let removedItem = this.value[index];\n      this.value = this.value.filter((val, i) => i != index);\n      this.onModelChange(this.value);\n      this.onRemove.emit({\n        originalEvent: event,\n        value: removedItem\n      });\n      this.updateFilledState();\n      this.updateMaxedOut();\n    }\n    addItem(event, item, preventDefault) {\n      this.value = this.value || [];\n      if (item && item.trim().length) {\n        if (this.allowDuplicate || this.value.indexOf(item) === -1) {\n          this.value = [...this.value, item];\n          this.onModelChange(this.value);\n          this.onAdd.emit({\n            originalEvent: event,\n            value: item\n          });\n        }\n      }\n      this.updateFilledState();\n      this.updateMaxedOut();\n      this.inputViewChild.nativeElement.value = '';\n      if (preventDefault) {\n        event.preventDefault();\n      }\n    }\n    clear() {\n      this.value = null;\n      this.updateFilledState();\n      this.onModelChange(this.value);\n      this.onClear.emit();\n    }\n    onKeydown(event) {\n      switch (event.which) {\n        //backspace\n        case 8:\n          if (this.inputViewChild.nativeElement.value.length === 0 && this.value && this.value.length > 0) {\n            this.value = [...this.value];\n            let removedItem = this.value.pop();\n            this.onModelChange(this.value);\n            this.onRemove.emit({\n              originalEvent: event,\n              value: removedItem\n            });\n            this.updateFilledState();\n          }\n          break;\n        //enter\n        case 13:\n          this.addItem(event, this.inputViewChild.nativeElement.value, true);\n          break;\n        case 9:\n          if (this.addOnTab && this.inputViewChild.nativeElement.value !== '') {\n            this.addItem(event, this.inputViewChild.nativeElement.value, true);\n          }\n          break;\n        default:\n          if (this.max && this.value && this.max === this.value.length) {\n            event.preventDefault();\n          } else if (this.separator) {\n            if (this.separator === event.key || event.key.match(this.separator)) {\n              this.addItem(event, this.inputViewChild.nativeElement.value, true);\n            }\n          }\n          break;\n      }\n    }\n    updateMaxedOut() {\n      if (this.inputViewChild && this.inputViewChild.nativeElement) {\n        if (this.max && this.value && this.max === this.value.length) {\n          // Calling `blur` is necessary because firefox does not call `onfocus` events\n          // for disabled inputs, unlike chromium browsers.\n          this.inputViewChild.nativeElement.blur();\n          this.inputViewChild.nativeElement.disabled = true;\n        } else {\n          if (this.disabled) {\n            this.inputViewChild.nativeElement.blur();\n          }\n          this.inputViewChild.nativeElement.disabled = this.disabled || false;\n        }\n      }\n    }\n  }\n  Chips.ɵfac = function Chips_Factory(t) {\n    return new (t || Chips)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  Chips.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Chips,\n    selectors: [[\"p-chips\"]],\n    contentQueries: function Chips_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    viewQuery: function Chips_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputViewChild = _t.first);\n      }\n    },\n    hostAttrs: [1, \"p-element\", \"p-inputwrapper\"],\n    hostVars: 6,\n    hostBindings: function Chips_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"p-inputwrapper-filled\", ctx.filled)(\"p-inputwrapper-focus\", ctx.focus)(\"p-chips-clearable\", ctx.showClear);\n      }\n    },\n    inputs: {\n      style: \"style\",\n      styleClass: \"styleClass\",\n      disabled: \"disabled\",\n      field: \"field\",\n      placeholder: \"placeholder\",\n      max: \"max\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      tabindex: \"tabindex\",\n      inputId: \"inputId\",\n      allowDuplicate: \"allowDuplicate\",\n      inputStyle: \"inputStyle\",\n      inputStyleClass: \"inputStyleClass\",\n      addOnTab: \"addOnTab\",\n      addOnBlur: \"addOnBlur\",\n      separator: \"separator\",\n      showClear: \"showClear\"\n    },\n    outputs: {\n      onAdd: \"onAdd\",\n      onRemove: \"onRemove\",\n      onFocus: \"onFocus\",\n      onBlur: \"onBlur\",\n      onChipClick: \"onChipClick\",\n      onClear: \"onClear\"\n    },\n    features: [i0.ɵɵProvidersFeature([CHIPS_VALUE_ACCESSOR])],\n    decls: 7,\n    vars: 21,\n    consts: [[3, \"ngClass\", \"ngStyle\", \"click\"], [3, \"ngClass\"], [\"class\", \"p-chips-token\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"p-chips-input-token\", 3, \"ngClass\"], [\"type\", \"text\", 3, \"disabled\", \"ngStyle\", \"keydown\", \"input\", \"paste\", \"focus\", \"blur\"], [\"inputtext\", \"\"], [4, \"ngIf\"], [1, \"p-chips-token\", 3, \"click\"], [\"token\", \"\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"class\", \"p-chips-token-label\", 4, \"ngIf\"], [\"class\", \"p-chips-token-icon pi pi-times-circle\", 3, \"click\", 4, \"ngIf\"], [1, \"p-chips-token-label\"], [1, \"p-chips-token-icon\", \"pi\", \"pi-times-circle\", 3, \"click\"], [1, \"p-chips-clear-icon\", \"pi\", \"pi-times\", 3, \"click\"]],\n    template: function Chips_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"click\", function Chips_Template_div_click_0_listener() {\n          return ctx.onClick();\n        });\n        i0.ɵɵelementStart(1, \"ul\", 1);\n        i0.ɵɵtemplate(2, Chips_li_2_Template, 5, 6, \"li\", 2);\n        i0.ɵɵelementStart(3, \"li\", 3)(4, \"input\", 4, 5);\n        i0.ɵɵlistener(\"keydown\", function Chips_Template_input_keydown_4_listener($event) {\n          return ctx.onKeydown($event);\n        })(\"input\", function Chips_Template_input_input_4_listener() {\n          return ctx.onInput();\n        })(\"paste\", function Chips_Template_input_paste_4_listener($event) {\n          return ctx.onPaste($event);\n        })(\"focus\", function Chips_Template_input_focus_4_listener($event) {\n          return ctx.onInputFocus($event);\n        })(\"blur\", function Chips_Template_input_blur_4_listener($event) {\n          return ctx.onInputBlur($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(6, Chips_li_6_Template, 2, 0, \"li\", 6);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngClass\", \"p-chips p-component\")(\"ngStyle\", ctx.style);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(16, _c2, ctx.focus, ctx.disabled));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.value);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(19, _c3, ctx.showClear && !ctx.disabled));\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassMap(ctx.inputStyleClass);\n        i0.ɵɵproperty(\"disabled\", ctx.disabled)(\"ngStyle\", ctx.inputStyle);\n        i0.ɵɵattribute(\"id\", ctx.inputId)(\"placeholder\", ctx.value && ctx.value.length ? null : ctx.placeholder)(\"tabindex\", ctx.tabindex)(\"aria-labelledby\", ctx.ariaLabelledBy);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.value != null && ctx.filled && !ctx.disabled && ctx.showClear);\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i1.NgStyle],\n    styles: [\".p-chips{display:inline-flex}.p-chips-multiple-container{margin:0;padding:0;list-style-type:none;cursor:text;overflow:hidden;display:flex;align-items:center;flex-wrap:wrap}.p-chips-token{cursor:default;display:inline-flex;align-items:center;flex:0 0 auto;max-width:100%}.p-chips-token-label{min-width:0%;overflow:auto}.p-chips-token-label::-webkit-scrollbar{display:none}.p-chips-input-token{flex:1 1 auto;display:inline-flex}.p-chips-token-icon{cursor:pointer}.p-chips-input-token input{border:0 none;outline:0 none;background-color:transparent;margin:0;padding:0;box-shadow:none;border-radius:0;width:100%}.p-fluid .p-chips{display:flex}.p-chips-clear-icon{position:absolute;top:50%;margin-top:-.5rem;cursor:pointer}.p-chips-clearable .p-inputtext{position:relative}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return Chips;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ChipsModule = /*#__PURE__*/(() => {\n  class ChipsModule {}\n  ChipsModule.ɵfac = function ChipsModule_Factory(t) {\n    return new (t || ChipsModule)();\n  };\n  ChipsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ChipsModule\n  });\n  ChipsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, InputTextModule, SharedModule, InputTextModule, SharedModule]\n  });\n  return ChipsModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CHIPS_VALUE_ACCESSOR, Chips, ChipsModule };\n//# sourceMappingURL=primeng-chips.mjs.map\n//# sourceMappingURL=primeng-chips.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}