{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, ContentChildren, ViewChild, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler } from 'primeng/dom';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nconst _c0 = [\"container\"];\nfunction Splitter_ng_template_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Splitter_ng_template_2_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵlistener(\"mousedown\", function Splitter_ng_template_2_div_2_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const i_r3 = i0.ɵɵnextContext().index;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.onGutterMouseDown($event, i_r3));\n    })(\"touchstart\", function Splitter_ng_template_2_div_2_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const i_r3 = i0.ɵɵnextContext().index;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.onGutterTouchStart($event, i_r3));\n    });\n    i0.ɵɵelement(1, \"div\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r5.gutterStyle());\n  }\n}\nfunction Splitter_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 0);\n    i0.ɵɵtemplate(1, Splitter_ng_template_2_ng_container_1_Template, 1, 0, \"ng-container\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, Splitter_ng_template_2_div_2_Template, 2, 1, \"div\", 4);\n  }\n  if (rf & 2) {\n    const panel_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.panelStyleClass);\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.panelContainerClass())(\"ngStyle\", ctx_r1.panelStyle);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", panel_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", i_r3 !== ctx_r1.panels.length - 1);\n  }\n}\nlet Splitter = /*#__PURE__*/(() => {\n  class Splitter {\n    constructor(cd, el) {\n      this.cd = cd;\n      this.el = el;\n      this.stateStorage = 'session';\n      this.stateKey = null;\n      this.layout = 'horizontal';\n      this.gutterSize = 4;\n      this.minSizes = [];\n      this.onResizeEnd = new EventEmitter();\n      this.onResizeStart = new EventEmitter();\n      this.nested = false;\n      this.panels = [];\n      this.dragging = false;\n      this.mouseMoveListener = null;\n      this.mouseUpListener = null;\n      this.touchMoveListener = null;\n      this.touchEndListener = null;\n      this.size = null;\n      this.gutterElement = null;\n      this.startPos = null;\n      this.prevPanelElement = null;\n      this.nextPanelElement = null;\n      this.nextPanelSize = null;\n      this.prevPanelSize = null;\n      this._panelSizes = [];\n      this.prevPanelIndex = null;\n    }\n    get panelSizes() {\n      return this._panelSizes;\n    }\n    set panelSizes(val) {\n      this._panelSizes = val;\n      if (this.el && this.el.nativeElement && this.panels.length > 0) {\n        let children = [...this.el.nativeElement.children[0].children].filter(child => DomHandler.hasClass(child, 'p-splitter-panel'));\n        let _panelSizes = [];\n        this.panels.map((panel, i) => {\n          let panelInitialSize = this.panelSizes.length - 1 >= i ? this.panelSizes[i] : null;\n          let panelSize = panelInitialSize || 100 / this.panels.length;\n          _panelSizes[i] = panelSize;\n          children[i].style.flexBasis = 'calc(' + panelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n        });\n      }\n    }\n    ngOnInit() {\n      this.nested = this.isNested();\n    }\n    ngAfterContentInit() {\n      this.templates.forEach(item => {\n        switch (item.getType()) {\n          case 'panel':\n            this.panels.push(item.template);\n            break;\n          default:\n            this.panels.push(item.template);\n            break;\n        }\n      });\n    }\n    ngAfterViewInit() {\n      if (this.panels && this.panels.length) {\n        let initialized = false;\n        if (this.isStateful()) {\n          initialized = this.restoreState();\n        }\n        if (!initialized) {\n          let children = [...this.el.nativeElement.children[0].children].filter(child => DomHandler.hasClass(child, 'p-splitter-panel'));\n          let _panelSizes = [];\n          this.panels.map((panel, i) => {\n            let panelInitialSize = this.panelSizes.length - 1 >= i ? this.panelSizes[i] : null;\n            let panelSize = panelInitialSize || 100 / this.panels.length;\n            _panelSizes[i] = panelSize;\n            children[i].style.flexBasis = 'calc(' + panelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n          });\n          this._panelSizes = _panelSizes;\n        }\n      }\n    }\n    resizeStart(event, index) {\n      this.gutterElement = event.currentTarget;\n      this.size = this.horizontal() ? DomHandler.getWidth(this.containerViewChild.nativeElement) : DomHandler.getHeight(this.containerViewChild.nativeElement);\n      this.dragging = true;\n      this.startPos = this.horizontal() ? event.pageX || event.changedTouches[0].pageX : event.pageY || event.changedTouches[0].pageY;\n      this.prevPanelElement = this.gutterElement.previousElementSibling;\n      this.nextPanelElement = this.gutterElement.nextElementSibling;\n      this.prevPanelSize = 100 * (this.horizontal() ? DomHandler.getOuterWidth(this.prevPanelElement, true) : DomHandler.getOuterHeight(this.prevPanelElement, true)) / this.size;\n      this.nextPanelSize = 100 * (this.horizontal() ? DomHandler.getOuterWidth(this.nextPanelElement, true) : DomHandler.getOuterHeight(this.nextPanelElement, true)) / this.size;\n      this.prevPanelIndex = index;\n      DomHandler.addClass(this.gutterElement, 'p-splitter-gutter-resizing');\n      DomHandler.addClass(this.containerViewChild.nativeElement, 'p-splitter-resizing');\n      this.onResizeStart.emit({\n        originalEvent: event,\n        sizes: this._panelSizes\n      });\n    }\n    onResize(event) {\n      let newPos;\n      if (this.horizontal()) newPos = event.pageX * 100 / this.size - this.startPos * 100 / this.size;else newPos = event.pageY * 100 / this.size - this.startPos * 100 / this.size;\n      let newPrevPanelSize = this.prevPanelSize + newPos;\n      let newNextPanelSize = this.nextPanelSize - newPos;\n      if (this.validateResize(newPrevPanelSize, newNextPanelSize)) {\n        this.prevPanelElement.style.flexBasis = 'calc(' + newPrevPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n        this.nextPanelElement.style.flexBasis = 'calc(' + newNextPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n        this._panelSizes[this.prevPanelIndex] = newPrevPanelSize;\n        this._panelSizes[this.prevPanelIndex + 1] = newNextPanelSize;\n      }\n    }\n    resizeEnd(event) {\n      if (this.isStateful()) {\n        this.saveState();\n      }\n      this.onResizeEnd.emit({\n        originalEvent: event,\n        sizes: this._panelSizes\n      });\n      DomHandler.removeClass(this.gutterElement, 'p-splitter-gutter-resizing');\n      DomHandler.removeClass(this.containerViewChild.nativeElement, 'p-splitter-resizing');\n      this.clear();\n    }\n    onGutterMouseDown(event, index) {\n      this.resizeStart(event, index);\n      this.bindMouseListeners();\n    }\n    onGutterTouchStart(event, index) {\n      if (event.cancelable) {\n        this.resizeStart(event, index);\n        this.bindTouchListeners();\n        event.preventDefault();\n      }\n    }\n    onGutterTouchEnd(event) {\n      this.resizeEnd(event);\n      this.unbindTouchListeners();\n      if (event.cancelable) event.preventDefault();\n    }\n    validateResize(newPrevPanelSize, newNextPanelSize) {\n      if (this.minSizes.length >= 1 && this.minSizes[0] && this.minSizes[0] > newPrevPanelSize) {\n        return false;\n      }\n      if (this.minSizes.length > 1 && this.minSizes[1] && this.minSizes[1] > newNextPanelSize) {\n        return false;\n      }\n      return true;\n    }\n    bindMouseListeners() {\n      if (!this.mouseMoveListener) {\n        this.mouseMoveListener = event => this.onResize(event);\n        document.addEventListener('mousemove', this.mouseMoveListener);\n      }\n      if (!this.mouseUpListener) {\n        this.mouseUpListener = event => {\n          this.resizeEnd(event);\n          this.unbindMouseListeners();\n        };\n        document.addEventListener('mouseup', this.mouseUpListener);\n      }\n    }\n    bindTouchListeners() {\n      if (!this.touchMoveListener) {\n        this.touchMoveListener = event => this.onResize(event.changedTouches[0]);\n        document.addEventListener('touchmove', this.touchMoveListener);\n      }\n      if (!this.touchEndListener) {\n        this.touchEndListener = event => {\n          this.resizeEnd(event);\n          this.unbindTouchListeners();\n        };\n        document.addEventListener('touchend', this.touchEndListener);\n      }\n    }\n    unbindMouseListeners() {\n      if (this.mouseMoveListener) {\n        document.removeEventListener('mousemove', this.mouseMoveListener);\n        this.mouseMoveListener = null;\n      }\n      if (this.mouseUpListener) {\n        document.removeEventListener('mouseup', this.mouseUpListener);\n        this.mouseUpListener = null;\n      }\n    }\n    unbindTouchListeners() {\n      if (this.touchMoveListener) {\n        document.removeEventListener('touchmove', this.touchMoveListener);\n        this.touchMoveListener = null;\n      }\n      if (this.touchEndListener) {\n        document.removeEventListener('touchend', this.touchEndListener);\n        this.touchEndListener = null;\n      }\n    }\n    clear() {\n      this.dragging = false;\n      this.size = null;\n      this.startPos = null;\n      this.prevPanelElement = null;\n      this.nextPanelElement = null;\n      this.prevPanelSize = null;\n      this.nextPanelSize = null;\n      this.gutterElement = null;\n      this.prevPanelIndex = null;\n    }\n    isNested() {\n      if (this.el.nativeElement) {\n        let parent = this.el.nativeElement.parentElement;\n        while (parent && !DomHandler.hasClass(parent, 'p-splitter')) {\n          parent = parent.parentElement;\n        }\n        return parent !== null;\n      } else {\n        return false;\n      }\n    }\n    isStateful() {\n      return this.stateKey != null;\n    }\n    getStorage() {\n      switch (this.stateStorage) {\n        case 'local':\n          return window.localStorage;\n        case 'session':\n          return window.sessionStorage;\n        default:\n          throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n      }\n    }\n    saveState() {\n      this.getStorage().setItem(this.stateKey, JSON.stringify(this._panelSizes));\n    }\n    restoreState() {\n      const storage = this.getStorage();\n      const stateString = storage.getItem(this.stateKey);\n      if (stateString) {\n        this._panelSizes = JSON.parse(stateString);\n        let children = [...this.containerViewChild.nativeElement.children].filter(child => DomHandler.hasClass(child, 'p-splitter-panel'));\n        children.forEach((child, i) => {\n          child.style.flexBasis = 'calc(' + this._panelSizes[i] + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n        });\n        return true;\n      }\n      return false;\n    }\n    containerClass() {\n      return {\n        'p-splitter p-component': true,\n        'p-splitter-horizontal': this.layout === 'horizontal',\n        'p-splitter-vertical': this.layout === 'vertical'\n      };\n    }\n    panelContainerClass() {\n      return {\n        'p-splitter-panel': true,\n        'p-splitter-panel-nested': true\n      };\n    }\n    gutterStyle() {\n      if (this.horizontal()) return {\n        width: this.gutterSize + 'px'\n      };else return {\n        height: this.gutterSize + 'px'\n      };\n    }\n    horizontal() {\n      return this.layout === 'horizontal';\n    }\n  }\n  Splitter.ɵfac = function Splitter_Factory(t) {\n    return new (t || Splitter)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  Splitter.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Splitter,\n    selectors: [[\"p-splitter\"]],\n    contentQueries: function Splitter_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    viewQuery: function Splitter_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerViewChild = _t.first);\n      }\n    },\n    hostAttrs: [1, \"p-element\"],\n    hostVars: 2,\n    hostBindings: function Splitter_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"p-splitter-panel-nested\", ctx.nested);\n      }\n    },\n    inputs: {\n      styleClass: \"styleClass\",\n      panelStyleClass: \"panelStyleClass\",\n      style: \"style\",\n      panelStyle: \"panelStyle\",\n      stateStorage: \"stateStorage\",\n      stateKey: \"stateKey\",\n      layout: \"layout\",\n      gutterSize: \"gutterSize\",\n      minSizes: \"minSizes\",\n      panelSizes: \"panelSizes\"\n    },\n    outputs: {\n      onResizeEnd: \"onResizeEnd\",\n      onResizeStart: \"onResizeStart\"\n    },\n    decls: 3,\n    vars: 5,\n    consts: [[3, \"ngClass\", \"ngStyle\"], [\"container\", \"\"], [\"ngFor\", \"\", 3, \"ngForOf\"], [4, \"ngTemplateOutlet\"], [\"class\", \"p-splitter-gutter\", 3, \"ngStyle\", \"mousedown\", \"touchstart\", 4, \"ngIf\"], [1, \"p-splitter-gutter\", 3, \"ngStyle\", \"mousedown\", \"touchstart\"], [1, \"p-splitter-gutter-handle\"]],\n    template: function Splitter_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵtemplate(2, Splitter_ng_template_2_Template, 3, 6, \"ng-template\", 2);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngClass\", ctx.containerClass())(\"ngStyle\", ctx.style);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.panels);\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i1.NgStyle],\n    styles: [\".p-splitter{display:flex;flex-wrap:nowrap}.p-splitter-vertical{flex-direction:column}.p-splitter-panel{flex-grow:1}.p-splitter-panel-nested{display:flex}.p-splitter-panel p-splitter{flex-grow:1}.p-splitter-panel .p-splitter{flex-grow:1;border:0 none}.p-splitter-gutter{flex-grow:0;flex-shrink:0;display:flex;align-items:center;justify-content:center;cursor:col-resize}.p-splitter-horizontal.p-splitter-resizing{cursor:col-resize;-webkit-user-select:none;user-select:none}.p-splitter-horizontal>.p-splitter-gutter>.p-splitter-gutter-handle{height:24px;width:100%}.p-splitter-horizontal>.p-splitter-gutter{cursor:col-resize}.p-splitter-vertical.p-splitter-resizing{cursor:row-resize;-webkit-user-select:none;user-select:none}.p-splitter-vertical>.p-splitter-gutter{cursor:row-resize}.p-splitter-vertical>.p-splitter-gutter>.p-splitter-gutter-handle{width:24px;height:100%}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return Splitter;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SplitterModule = /*#__PURE__*/(() => {\n  class SplitterModule {}\n  SplitterModule.ɵfac = function SplitterModule_Factory(t) {\n    return new (t || SplitterModule)();\n  };\n  SplitterModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: SplitterModule\n  });\n  SplitterModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, SharedModule]\n  });\n  return SplitterModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Splitter, SplitterModule };\n//# sourceMappingURL=primeng-splitter.mjs.map\n//# sourceMappingURL=primeng-splitter.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}