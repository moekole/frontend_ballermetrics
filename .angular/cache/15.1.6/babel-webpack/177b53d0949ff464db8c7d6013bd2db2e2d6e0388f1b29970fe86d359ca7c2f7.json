{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ZIndexUtils } from 'primeng/utils';\nimport * as i1 from 'primeng/api';\nconst _c0 = [\"container\"];\nconst _c1 = [\"input\"];\nconst _c2 = [\"colorSelector\"];\nconst _c3 = [\"colorHandle\"];\nconst _c4 = [\"hue\"];\nconst _c5 = [\"hueHandle\"];\nconst _c6 = function (a0) {\n  return {\n    \"p-disabled\": a0\n  };\n};\nfunction ColorPicker_input_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 4, 5);\n    i0.ɵɵlistener(\"focus\", function ColorPicker_input_2_Template_input_focus_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onInputFocus());\n    })(\"click\", function ColorPicker_input_2_Template_input_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.onInputClick());\n    })(\"keydown\", function ColorPicker_input_2_Template_input_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.onInputKeydown($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background-color\", ctx_r1.inputBgColor);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(6, _c6, ctx_r1.disabled))(\"disabled\", ctx_r1.disabled);\n    i0.ɵɵattribute(\"id\", ctx_r1.inputId)(\"tabindex\", ctx_r1.tabindex);\n  }\n}\nconst _c7 = function (a1, a2) {\n  return {\n    \"p-colorpicker-panel\": true,\n    \"p-colorpicker-overlay-panel\": a1,\n    \"p-disabled\": a2\n  };\n};\nconst _c8 = function (a0, a1) {\n  return {\n    showTransitionParams: a0,\n    hideTransitionParams: a1\n  };\n};\nconst _c9 = function (a1) {\n  return {\n    value: \"visible\",\n    params: a1\n  };\n};\nfunction ColorPicker_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵlistener(\"click\", function ColorPicker_div_3_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.onOverlayClick($event));\n    })(\"@overlayAnimation.start\", function ColorPicker_div_3_Template_div_animation_overlayAnimation_start_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.onOverlayAnimationStart($event));\n    })(\"@overlayAnimation.done\", function ColorPicker_div_3_Template_div_animation_overlayAnimation_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.onOverlayAnimationEnd($event));\n    });\n    i0.ɵɵelementStart(1, \"div\", 7)(2, \"div\", 8, 9);\n    i0.ɵɵlistener(\"touchstart\", function ColorPicker_div_3_Template_div_touchstart_2_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.onColorTouchStart($event));\n    })(\"touchmove\", function ColorPicker_div_3_Template_div_touchmove_2_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.onMove($event));\n    })(\"touchend\", function ColorPicker_div_3_Template_div_touchend_2_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.onDragEnd());\n    })(\"mousedown\", function ColorPicker_div_3_Template_div_mousedown_2_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r19.onColorMousedown($event));\n    });\n    i0.ɵɵelementStart(4, \"div\", 10);\n    i0.ɵɵelement(5, \"div\", 11, 12);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 13, 14);\n    i0.ɵɵlistener(\"mousedown\", function ColorPicker_div_3_Template_div_mousedown_7_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.onHueMousedown($event));\n    })(\"touchstart\", function ColorPicker_div_3_Template_div_touchstart_7_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.onHueTouchStart($event));\n    })(\"touchmove\", function ColorPicker_div_3_Template_div_touchmove_7_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r22.onMove($event));\n    })(\"touchend\", function ColorPicker_div_3_Template_div_touchend_7_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r23.onDragEnd());\n    });\n    i0.ɵɵelement(9, \"div\", 15, 16);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(3, _c7, !ctx_r2.inline, ctx_r2.disabled))(\"@overlayAnimation\", i0.ɵɵpureFunction1(9, _c9, i0.ɵɵpureFunction2(6, _c8, ctx_r2.showTransitionOptions, ctx_r2.hideTransitionOptions)))(\"@.disabled\", ctx_r2.inline === true);\n  }\n}\nconst _c10 = function (a1, a2) {\n  return {\n    \"p-colorpicker p-component\": true,\n    \"p-colorpicker-overlay\": a1,\n    \"p-colorpicker-dragging\": a2\n  };\n};\nconst COLORPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ColorPicker),\n  multi: true\n};\nlet ColorPicker = /*#__PURE__*/(() => {\n  class ColorPicker {\n    constructor(el, renderer, cd, config, overlayService) {\n      this.el = el;\n      this.renderer = renderer;\n      this.cd = cd;\n      this.config = config;\n      this.overlayService = overlayService;\n      this.format = 'hex';\n      this.autoZIndex = true;\n      this.baseZIndex = 0;\n      this.showTransitionOptions = '.12s cubic-bezier(0, 0, 0.2, 1)';\n      this.hideTransitionOptions = '.1s linear';\n      this.onChange = new EventEmitter();\n      this.onShow = new EventEmitter();\n      this.onHide = new EventEmitter();\n      this.value = {\n        h: 0,\n        s: 100,\n        b: 100\n      };\n      this.defaultColor = 'ff0000';\n      this.onModelChange = () => {};\n      this.onModelTouched = () => {};\n    }\n    set colorSelector(element) {\n      this.colorSelectorViewChild = element;\n    }\n    set colorHandle(element) {\n      this.colorHandleViewChild = element;\n    }\n    set hue(element) {\n      this.hueViewChild = element;\n    }\n    set hueHandle(element) {\n      this.hueHandleViewChild = element;\n    }\n    onHueMousedown(event) {\n      if (this.disabled) {\n        return;\n      }\n      this.bindDocumentMousemoveListener();\n      this.bindDocumentMouseupListener();\n      this.hueDragging = true;\n      this.pickHue(event);\n    }\n    onHueTouchStart(event) {\n      if (this.disabled) {\n        return;\n      }\n      this.hueDragging = true;\n      this.pickHue(event, event.changedTouches[0]);\n    }\n    onColorTouchStart(event) {\n      if (this.disabled) {\n        return;\n      }\n      this.colorDragging = true;\n      this.pickColor(event, event.changedTouches[0]);\n    }\n    pickHue(event, position) {\n      let pageY = position ? position.pageY : event.pageY;\n      let top = this.hueViewChild.nativeElement.getBoundingClientRect().top + (window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0);\n      this.value = this.validateHSB({\n        h: Math.floor(360 * (150 - Math.max(0, Math.min(150, pageY - top))) / 150),\n        s: this.value.s,\n        b: this.value.b\n      });\n      this.updateColorSelector();\n      this.updateUI();\n      this.updateModel();\n      this.onChange.emit({\n        originalEvent: event,\n        value: this.getValueToUpdate()\n      });\n    }\n    onColorMousedown(event) {\n      if (this.disabled) {\n        return;\n      }\n      this.bindDocumentMousemoveListener();\n      this.bindDocumentMouseupListener();\n      this.colorDragging = true;\n      this.pickColor(event);\n    }\n    onMove(event) {\n      if (this.colorDragging) {\n        this.pickColor(event, event.changedTouches[0]);\n        event.preventDefault();\n      }\n      if (this.hueDragging) {\n        this.pickHue(event, event.changedTouches[0]);\n        event.preventDefault();\n      }\n    }\n    onDragEnd() {\n      this.colorDragging = false;\n      this.hueDragging = false;\n      this.unbindDocumentMousemoveListener();\n      this.unbindDocumentMouseupListener();\n    }\n    pickColor(event, position) {\n      let pageX = position ? position.pageX : event.pageX;\n      let pageY = position ? position.pageY : event.pageY;\n      let rect = this.colorSelectorViewChild.nativeElement.getBoundingClientRect();\n      let top = rect.top + (window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0);\n      let left = rect.left + document.body.scrollLeft;\n      let saturation = Math.floor(100 * Math.max(0, Math.min(150, pageX - left)) / 150);\n      let brightness = Math.floor(100 * (150 - Math.max(0, Math.min(150, pageY - top))) / 150);\n      this.value = this.validateHSB({\n        h: this.value.h,\n        s: saturation,\n        b: brightness\n      });\n      this.updateUI();\n      this.updateModel();\n      this.onChange.emit({\n        originalEvent: event,\n        value: this.getValueToUpdate()\n      });\n    }\n    getValueToUpdate() {\n      let val;\n      switch (this.format) {\n        case 'hex':\n          val = '#' + this.HSBtoHEX(this.value);\n          break;\n        case 'rgb':\n          val = this.HSBtoRGB(this.value);\n          break;\n        case 'hsb':\n          val = this.value;\n          break;\n      }\n      return val;\n    }\n    updateModel() {\n      this.onModelChange(this.getValueToUpdate());\n    }\n    writeValue(value) {\n      if (value) {\n        switch (this.format) {\n          case 'hex':\n            this.value = this.HEXtoHSB(value);\n            break;\n          case 'rgb':\n            this.value = this.RGBtoHSB(value);\n            break;\n          case 'hsb':\n            this.value = value;\n            break;\n        }\n      } else {\n        this.value = this.HEXtoHSB(this.defaultColor);\n      }\n      this.updateColorSelector();\n      this.updateUI();\n      this.cd.markForCheck();\n    }\n    updateColorSelector() {\n      if (this.colorSelectorViewChild) {\n        const hsb = {};\n        hsb.s = 100;\n        hsb.b = 100;\n        hsb.h = this.value.h;\n        this.colorSelectorViewChild.nativeElement.style.backgroundColor = '#' + this.HSBtoHEX(hsb);\n      }\n    }\n    updateUI() {\n      if (this.colorHandleViewChild && this.hueHandleViewChild.nativeElement) {\n        this.colorHandleViewChild.nativeElement.style.left = Math.floor(150 * this.value.s / 100) + 'px';\n        this.colorHandleViewChild.nativeElement.style.top = Math.floor(150 * (100 - this.value.b) / 100) + 'px';\n        this.hueHandleViewChild.nativeElement.style.top = Math.floor(150 - 150 * this.value.h / 360) + 'px';\n      }\n      this.inputBgColor = '#' + this.HSBtoHEX(this.value);\n    }\n    onInputFocus() {\n      this.onModelTouched();\n    }\n    show() {\n      this.overlayVisible = true;\n      this.cd.markForCheck();\n    }\n    onOverlayAnimationStart(event) {\n      switch (event.toState) {\n        case 'visible':\n          if (!this.inline) {\n            this.overlay = event.element;\n            this.appendOverlay();\n            if (this.autoZIndex) {\n              ZIndexUtils.set('overlay', this.overlay, this.config.zIndex.overlay);\n            }\n            this.alignOverlay();\n            this.bindDocumentClickListener();\n            this.bindDocumentResizeListener();\n            this.bindScrollListener();\n            this.updateColorSelector();\n            this.updateUI();\n          }\n          break;\n        case 'void':\n          this.onOverlayHide();\n          break;\n      }\n    }\n    onOverlayAnimationEnd(event) {\n      switch (event.toState) {\n        case 'visible':\n          if (!this.inline) {\n            this.onShow.emit({});\n          }\n          break;\n        case 'void':\n          if (this.autoZIndex) {\n            ZIndexUtils.clear(event.element);\n          }\n          this.onHide.emit({});\n          break;\n      }\n    }\n    appendOverlay() {\n      if (this.appendTo) {\n        if (this.appendTo === 'body') document.body.appendChild(this.overlay);else DomHandler.appendChild(this.overlay, this.appendTo);\n      }\n    }\n    restoreOverlayAppend() {\n      if (this.overlay && this.appendTo) {\n        this.el.nativeElement.appendChild(this.overlay);\n      }\n    }\n    alignOverlay() {\n      if (this.appendTo) DomHandler.absolutePosition(this.overlay, this.inputViewChild.nativeElement);else DomHandler.relativePosition(this.overlay, this.inputViewChild.nativeElement);\n    }\n    hide() {\n      this.overlayVisible = false;\n      this.cd.markForCheck();\n    }\n    onInputClick() {\n      this.selfClick = true;\n      this.togglePanel();\n    }\n    togglePanel() {\n      if (!this.overlayVisible) this.show();else this.hide();\n    }\n    onInputKeydown(event) {\n      switch (event.which) {\n        //space\n        case 32:\n          this.togglePanel();\n          event.preventDefault();\n          break;\n        //escape and tab\n        case 27:\n        case 9:\n          this.hide();\n          break;\n      }\n    }\n    onOverlayClick(event) {\n      this.overlayService.add({\n        originalEvent: event,\n        target: this.el.nativeElement\n      });\n      this.selfClick = true;\n    }\n    registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n    setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n    bindDocumentClickListener() {\n      if (!this.documentClickListener) {\n        const documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';\n        this.documentClickListener = this.renderer.listen(documentTarget, 'click', () => {\n          if (!this.selfClick) {\n            this.overlayVisible = false;\n            this.unbindDocumentClickListener();\n          }\n          this.selfClick = false;\n          this.cd.markForCheck();\n        });\n      }\n    }\n    unbindDocumentClickListener() {\n      if (this.documentClickListener) {\n        this.documentClickListener();\n        this.documentClickListener = null;\n      }\n    }\n    bindDocumentMousemoveListener() {\n      if (!this.documentMousemoveListener) {\n        const documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';\n        this.documentMousemoveListener = this.renderer.listen(documentTarget, 'mousemove', event => {\n          if (this.colorDragging) {\n            this.pickColor(event);\n          }\n          if (this.hueDragging) {\n            this.pickHue(event);\n          }\n        });\n      }\n    }\n    unbindDocumentMousemoveListener() {\n      if (this.documentMousemoveListener) {\n        this.documentMousemoveListener();\n        this.documentMousemoveListener = null;\n      }\n    }\n    bindDocumentMouseupListener() {\n      if (!this.documentMouseupListener) {\n        const documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';\n        this.documentMouseupListener = this.renderer.listen(documentTarget, 'mouseup', () => {\n          this.colorDragging = false;\n          this.hueDragging = false;\n          this.unbindDocumentMousemoveListener();\n          this.unbindDocumentMouseupListener();\n        });\n      }\n    }\n    unbindDocumentMouseupListener() {\n      if (this.documentMouseupListener) {\n        this.documentMouseupListener();\n        this.documentMouseupListener = null;\n      }\n    }\n    bindDocumentResizeListener() {\n      this.documentResizeListener = this.onWindowResize.bind(this);\n      window.addEventListener('resize', this.documentResizeListener);\n    }\n    unbindDocumentResizeListener() {\n      if (this.documentResizeListener) {\n        window.removeEventListener('resize', this.documentResizeListener);\n        this.documentResizeListener = null;\n      }\n    }\n    onWindowResize() {\n      if (this.overlayVisible && !DomHandler.isTouchDevice()) {\n        this.hide();\n      }\n    }\n    bindScrollListener() {\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.containerViewChild.nativeElement, () => {\n          if (this.overlayVisible) {\n            this.hide();\n          }\n        });\n      }\n      this.scrollHandler.bindScrollListener();\n    }\n    unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    }\n    validateHSB(hsb) {\n      return {\n        h: Math.min(360, Math.max(0, hsb.h)),\n        s: Math.min(100, Math.max(0, hsb.s)),\n        b: Math.min(100, Math.max(0, hsb.b))\n      };\n    }\n    validateRGB(rgb) {\n      return {\n        r: Math.min(255, Math.max(0, rgb.r)),\n        g: Math.min(255, Math.max(0, rgb.g)),\n        b: Math.min(255, Math.max(0, rgb.b))\n      };\n    }\n    validateHEX(hex) {\n      var len = 6 - hex.length;\n      if (len > 0) {\n        var o = [];\n        for (var i = 0; i < len; i++) {\n          o.push('0');\n        }\n        o.push(hex);\n        hex = o.join('');\n      }\n      return hex;\n    }\n    HEXtoRGB(hex) {\n      let hexValue = parseInt(hex.indexOf('#') > -1 ? hex.substring(1) : hex, 16);\n      return {\n        r: hexValue >> 16,\n        g: (hexValue & 0x00ff00) >> 8,\n        b: hexValue & 0x0000ff\n      };\n    }\n    HEXtoHSB(hex) {\n      return this.RGBtoHSB(this.HEXtoRGB(hex));\n    }\n    RGBtoHSB(rgb) {\n      var hsb = {\n        h: 0,\n        s: 0,\n        b: 0\n      };\n      var min = Math.min(rgb.r, rgb.g, rgb.b);\n      var max = Math.max(rgb.r, rgb.g, rgb.b);\n      var delta = max - min;\n      hsb.b = max;\n      hsb.s = max != 0 ? 255 * delta / max : 0;\n      if (hsb.s != 0) {\n        if (rgb.r == max) {\n          hsb.h = (rgb.g - rgb.b) / delta;\n        } else if (rgb.g == max) {\n          hsb.h = 2 + (rgb.b - rgb.r) / delta;\n        } else {\n          hsb.h = 4 + (rgb.r - rgb.g) / delta;\n        }\n      } else {\n        hsb.h = -1;\n      }\n      hsb.h *= 60;\n      if (hsb.h < 0) {\n        hsb.h += 360;\n      }\n      hsb.s *= 100 / 255;\n      hsb.b *= 100 / 255;\n      return hsb;\n    }\n    HSBtoRGB(hsb) {\n      var rgb = {\n        r: null,\n        g: null,\n        b: null\n      };\n      let h = hsb.h;\n      let s = hsb.s * 255 / 100;\n      let v = hsb.b * 255 / 100;\n      if (s == 0) {\n        rgb = {\n          r: v,\n          g: v,\n          b: v\n        };\n      } else {\n        let t1 = v;\n        let t2 = (255 - s) * v / 255;\n        let t3 = (t1 - t2) * (h % 60) / 60;\n        if (h == 360) h = 0;\n        if (h < 60) {\n          rgb.r = t1;\n          rgb.b = t2;\n          rgb.g = t2 + t3;\n        } else if (h < 120) {\n          rgb.g = t1;\n          rgb.b = t2;\n          rgb.r = t1 - t3;\n        } else if (h < 180) {\n          rgb.g = t1;\n          rgb.r = t2;\n          rgb.b = t2 + t3;\n        } else if (h < 240) {\n          rgb.b = t1;\n          rgb.r = t2;\n          rgb.g = t1 - t3;\n        } else if (h < 300) {\n          rgb.b = t1;\n          rgb.g = t2;\n          rgb.r = t2 + t3;\n        } else if (h < 360) {\n          rgb.r = t1;\n          rgb.g = t2;\n          rgb.b = t1 - t3;\n        } else {\n          rgb.r = 0;\n          rgb.g = 0;\n          rgb.b = 0;\n        }\n      }\n      return {\n        r: Math.round(rgb.r),\n        g: Math.round(rgb.g),\n        b: Math.round(rgb.b)\n      };\n    }\n    RGBtoHEX(rgb) {\n      var hex = [rgb.r.toString(16), rgb.g.toString(16), rgb.b.toString(16)];\n      for (var key in hex) {\n        if (hex[key].length == 1) {\n          hex[key] = '0' + hex[key];\n        }\n      }\n      return hex.join('');\n    }\n    HSBtoHEX(hsb) {\n      return this.RGBtoHEX(this.HSBtoRGB(hsb));\n    }\n    onOverlayHide() {\n      this.unbindScrollListener();\n      this.unbindDocumentResizeListener();\n      this.unbindDocumentClickListener();\n      this.overlay = null;\n    }\n    ngOnDestroy() {\n      if (this.scrollHandler) {\n        this.scrollHandler.destroy();\n        this.scrollHandler = null;\n      }\n      if (this.overlay && this.autoZIndex) {\n        ZIndexUtils.clear(this.overlay);\n      }\n      this.restoreOverlayAppend();\n      this.onOverlayHide();\n    }\n  }\n  ColorPicker.ɵfac = function ColorPicker_Factory(t) {\n    return new (t || ColorPicker)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.PrimeNGConfig), i0.ɵɵdirectiveInject(i1.OverlayService));\n  };\n  ColorPicker.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ColorPicker,\n    selectors: [[\"p-colorPicker\"]],\n    viewQuery: function ColorPicker_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n        i0.ɵɵviewQuery(_c3, 5);\n        i0.ɵɵviewQuery(_c4, 5);\n        i0.ɵɵviewQuery(_c5, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.colorSelector = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.colorHandle = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.hue = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.hueHandle = _t.first);\n      }\n    },\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      style: \"style\",\n      styleClass: \"styleClass\",\n      inline: \"inline\",\n      format: \"format\",\n      appendTo: \"appendTo\",\n      disabled: \"disabled\",\n      tabindex: \"tabindex\",\n      inputId: \"inputId\",\n      autoZIndex: \"autoZIndex\",\n      baseZIndex: \"baseZIndex\",\n      showTransitionOptions: \"showTransitionOptions\",\n      hideTransitionOptions: \"hideTransitionOptions\"\n    },\n    outputs: {\n      onChange: \"onChange\",\n      onShow: \"onShow\",\n      onHide: \"onHide\"\n    },\n    features: [i0.ɵɵProvidersFeature([COLORPICKER_VALUE_ACCESSOR])],\n    decls: 4,\n    vars: 9,\n    consts: [[3, \"ngStyle\", \"ngClass\"], [\"container\", \"\"], [\"type\", \"text\", \"class\", \"p-colorpicker-preview p-inputtext\", \"readonly\", \"readonly\", 3, \"ngClass\", \"disabled\", \"backgroundColor\", \"focus\", \"click\", \"keydown\", 4, \"ngIf\"], [3, \"ngClass\", \"click\", 4, \"ngIf\"], [\"type\", \"text\", \"readonly\", \"readonly\", 1, \"p-colorpicker-preview\", \"p-inputtext\", 3, \"ngClass\", \"disabled\", \"focus\", \"click\", \"keydown\"], [\"input\", \"\"], [3, \"ngClass\", \"click\"], [1, \"p-colorpicker-content\"], [1, \"p-colorpicker-color-selector\", 3, \"touchstart\", \"touchmove\", \"touchend\", \"mousedown\"], [\"colorSelector\", \"\"], [1, \"p-colorpicker-color\"], [1, \"p-colorpicker-color-handle\"], [\"colorHandle\", \"\"], [1, \"p-colorpicker-hue\", 3, \"mousedown\", \"touchstart\", \"touchmove\", \"touchend\"], [\"hue\", \"\"], [1, \"p-colorpicker-hue-handle\"], [\"hueHandle\", \"\"]],\n    template: function ColorPicker_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵtemplate(2, ColorPicker_input_2_Template, 2, 8, \"input\", 2);\n        i0.ɵɵtemplate(3, ColorPicker_div_3_Template, 11, 11, \"div\", 3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngStyle\", ctx.style)(\"ngClass\", i0.ɵɵpureFunction2(6, _c10, !ctx.inline, ctx.colorDragging || ctx.hueDragging));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.inline);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.inline || ctx.overlayVisible);\n      }\n    },\n    dependencies: [i2.NgClass, i2.NgIf, i2.NgStyle],\n    styles: [\".p-colorpicker{display:inline-block}.p-colorpicker-dragging{cursor:pointer}.p-colorpicker-overlay{position:relative}.p-colorpicker-panel{position:relative;width:193px;height:166px}.p-colorpicker-overlay-panel{position:absolute;top:0;left:0}.p-colorpicker-preview{cursor:pointer}.p-colorpicker-panel .p-colorpicker-content{position:relative}.p-colorpicker-panel .p-colorpicker-color-selector{width:150px;height:150px;top:8px;left:8px;position:absolute}.p-colorpicker-panel .p-colorpicker-color{width:150px;height:150px}.p-colorpicker-panel .p-colorpicker-color-handle{position:absolute;top:0;left:150px;border-radius:100%;width:10px;height:10px;border-width:1px;border-style:solid;margin:-5px 0 0 -5px;cursor:pointer;opacity:.85}.p-colorpicker-panel .p-colorpicker-hue{width:17px;height:150px;top:8px;left:167px;position:absolute;opacity:.85}.p-colorpicker-panel .p-colorpicker-hue-handle{position:absolute;top:150px;left:0;width:21px;margin-left:-2px;margin-top:-5px;height:10px;border-width:2px;border-style:solid;opacity:.85;cursor:pointer}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('overlayAnimation', [transition(':enter', [style({\n        opacity: 0,\n        transform: 'scaleY(0.8)'\n      }), animate('{{showTransitionParams}}')]), transition(':leave', [animate('{{hideTransitionParams}}', style({\n        opacity: 0\n      }))])])]\n    },\n    changeDetection: 0\n  });\n  return ColorPicker;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ColorPickerModule = /*#__PURE__*/(() => {\n  class ColorPickerModule {}\n  ColorPickerModule.ɵfac = function ColorPickerModule_Factory(t) {\n    return new (t || ColorPickerModule)();\n  };\n  ColorPickerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ColorPickerModule\n  });\n  ColorPickerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return ColorPickerModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { COLORPICKER_VALUE_ACCESSOR, ColorPicker, ColorPickerModule };\n//# sourceMappingURL=primeng-colorpicker.mjs.map\n//# sourceMappingURL=primeng-colorpicker.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}